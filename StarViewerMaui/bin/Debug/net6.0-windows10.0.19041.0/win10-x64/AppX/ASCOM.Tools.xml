<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ASCOM.Tools</name>
    </assembly>
    <members>
        <member name="T:ASCOM.Tools.ConsoleLogger">
            <summary>
            Simple logger to write to the console
            </summary>
        </member>
        <member name="P:ASCOM.Tools.ConsoleLogger.LoggingLevel">
            <summary>
            Return the current logging level
            </summary>
        </member>
        <member name="M:ASCOM.Tools.ConsoleLogger.Log(ASCOM.Common.Interfaces.LogLevel,System.String)">
            <summary>
            Write a message to the console
            </summary>
            <param name="level">Logging level</param>
            <param name="message">Message text</param>
        </member>
        <member name="M:ASCOM.Tools.ConsoleLogger.SetMinimumLoggingLevel(ASCOM.Common.Interfaces.LogLevel)">
            <summary>
            Minimum logging level to display.
            </summary>
            <param name="level">Required logging level.</param>
        </member>
        <member name="T:ASCOM.Tools.Unit">
            <summary>
            List of units that can be converted by the ConvertUnits method
            </summary>
        </member>
        <member name="F:ASCOM.Tools.Unit.metresPerSecond">
            <summary>
            Metres per second
            </summary>
        </member>
        <member name="F:ASCOM.Tools.Unit.milesPerHour">
            <summary>
            Miles per hour
            </summary>
        </member>
        <member name="F:ASCOM.Tools.Unit.knots">
            <summary>
            Knots
            </summary>
        </member>
        <member name="F:ASCOM.Tools.Unit.degreesCelsius">
            <summary>
            Degrees Celsius
            </summary>
        </member>
        <member name="F:ASCOM.Tools.Unit.degreesFarenheit">
            <summary>
            Degrees Fahrenheit
            </summary>
        </member>
        <member name="F:ASCOM.Tools.Unit.degreesKelvin">
            <summary>
            Degrees kelvin
            </summary>
        </member>
        <member name="F:ASCOM.Tools.Unit.hPa">
            <summary>
            Hecto pascals
            </summary>
        </member>
        <member name="F:ASCOM.Tools.Unit.mBar">
            <summary>
            Millibar
            </summary>
        </member>
        <member name="F:ASCOM.Tools.Unit.mmHg">
            <summary>
            Millimetres of mercury
            </summary>
        </member>
        <member name="F:ASCOM.Tools.Unit.inHg">
            <summary>
            Inches of mercury
            </summary>
        </member>
        <member name="F:ASCOM.Tools.Unit.mmPerHour">
            <summary>
            Millimetres per hour
            </summary>
        </member>
        <member name="F:ASCOM.Tools.Unit.inPerHour">
            <summary>
            Inches per hour
            </summary>
        </member>
        <member name="T:ASCOM.Tools.NamespaceDoc">
            <summary>
            Tools and components that support all application, device and driver development. This namespace includes the SOFA, Transform, TracLogger, XMLProfile and Utilities tools and is delivered in NuGet package: <b>ASCOM.Tools</b>.
            </summary>
        </member>
        <member name="T:ASCOM.Tools.Sofa">
            <summary>
            Presentation facade for the IAU SOFA library
            </summary>
            <remarks>This component assumes that a native library called libsofa exists in the same folder as the ASCOM.Tools DLL. This library must be compiled from the IAU SOFA C code base 
            for each supported OS platform: linux64, arm32, win64 etc.</remarks>
        </member>
        <member name="M:ASCOM.Tools.Sofa.SofaReleaseNumber">
            <summary>
            Major number of the SOFA issue currently used by this component.
            </summary>
            <returns>Integer issue number</returns>
            <remarks></remarks>
        </member>
        <member name="M:ASCOM.Tools.Sofa.SofaRevisionNumber">
            <summary>
            Revision number of the SOFA issue currently used by this component.
            </summary>
            <returns>Integer revision number</returns>
            <remarks></remarks>
        </member>
        <member name="M:ASCOM.Tools.Sofa.SofaIssueDate">
            <summary>
            Release date of the SOFA issue currently used by this component.
            </summary>
            <returns>String date in format yyyy-mm-dd</returns>
            <remarks></remarks>
        </member>
        <member name="M:ASCOM.Tools.Sofa.SofaRevisionDate">
            <summary>
            Release date of the revision to the SOFA Issue that is actually being used by this component.
            </summary>
            <returns>String date in format yyyy-mm-dd</returns>
            <remarks>When a new issue is employed that doesn't yet have a revision, this method will return the SofaIssueDate</remarks>
        </member>
        <member name="M:ASCOM.Tools.Sofa.Af2a(System.Char,System.Int16,System.Int16,System.Double,System.Double@)">
            <summary>
            Convert degrees, arcminutes, arcseconds to radians.
            </summary>
            <param name="s">Sign:  '-' = negative, otherwise positive</param>
            <param name="ideg">Degrees</param>
            <param name="iamin">Arcminutes</param>
            <param name="asec">Arcseconds</param>
            <param name="rad">Angle in radian</param>
            <returns>Status:  0 = OK, 1 = ideg outside range 0-359, 2 = iamin outside range 0-59, 3 = asec outside range 0-59.999...</returns>
            <remarks>
            Notes:
            <list type="number">
            <item><description>The result is computed even if any of the range checks fail.</description></item>
            <item><description>Negative ideg, iamin and/or asec produce a warning status, but the absolute value is used in the conversion.</description></item>
            <item><description>If there are multiple errors, the status value reflects only the first, the smallest taking precedence.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:ASCOM.Tools.Sofa.Anp(System.Double)">
            <summary>
            Normalize angle into the range 0 &lt;= a &lt; 2pi.
            </summary>
            <param name="a">Angle (radians)</param>
            <returns>Angle in range 0-2pi</returns>
            <remarks></remarks>
        </member>
        <member name="M:ASCOM.Tools.Sofa.Atci13(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Transform ICRS star data, epoch J2000.0, to CIRS using the SOFA Atci13 function.
            </summary>
            <param name="rc">ICRS right ascension at J2000.0 (radians, Note 1)</param>
            <param name="dc">ICRS declination at J2000.0 (radians, Note 1)</param>
            <param name="pr">RA proper motion (radians/year; Note 2)</param>
            <param name="pd">Dec proper motion (radians/year)</param>
            <param name="px">parallax (arcsec)</param>
            <param name="rv">radial velocity (km/s, +ve if receding)</param>
            <param name="date1">TDB as a 2-part Julian Date (Note 3)</param>
            <param name="date2">TDB as a 2-part Julian Date (Note 3)</param>
            <param name="ri">CIRS geocentric RA (radians)</param>
            <param name="di">CIRS geocentric Dec (radians)</param>
            <param name="eo">equation of the origins (ERA-GST, Note 5)</param>
            <remarks>
            Notes:
            <list type="number">
            <item><description>Star data for an epoch other than J2000.0 (for example from the Hipparcos catalog, which has an epoch of J1991.25) will require a preliminary call to iauPmsafe before use.</description></item>
            <item><description>The proper motion in RA is dRA/dt rather than cos(Dec)*dRA/dt.</description></item>
            <item><description> The TDB date date1+date2 is a Julian Date, apportioned in any convenient way between the two arguments.  For example, JD(TDB)=2450123.8g could be expressed in any of these ways, among others:
            <table style="width:340px;" cellspacing="0">
            <col style="width:80px;"></col>
            <col style="width:80px;"></col>
            <col style="width:180px;"></col>
            <tr>
            <td colspan="1" align="center" rowspan="1" style="width: 80px; padding-right: 10px; padding-left: 10px; 
            border-left-color: #000000; border-left-style: Solid; 
            border-top-color: #000000; border-top-style: Solid; 
            border-right-color: #000000; border-right-style: Solid;
            border-bottom-color: #000000; border-bottom-style: Solid; 
            border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; 
            background-color: #00ffff;" width="110px">
            <b>Date 1</b></td>
            <td colspan="1" rowspan="1" align="center" style="width: 80px; padding-right: 10px; padding-left: 10px; 
            border-top-color: #000000; border-top-style: Solid; 
            border-right-style: Solid; border-right-color: #000000; 
            border-bottom-color: #000000; border-bottom-style: Solid; 
            border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; 
            background-color: #00ffff;" width="110px">
            <b>Date 2</b></td>
            <td colspan="1" rowspan="1" align="center" style="width: 180px; padding-right: 10px; padding-left: 10px; 
            border-top-color: #000000; border-top-style: Solid; 
            border-right-style: Solid; border-right-color: #000000; 
            border-bottom-color: #000000; border-bottom-style: Solid; 
            border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; 
            background-color: #00ffff;" width="220px">
            <b>Method</b></td>
            </tr>
            <tr>
            <td align="right" style="padding-right: 10px; padding-left: 10px; 
            border-left-color: #000000; border-left-style: Solid; 
            border-right-color: #000000; border-right-style: Solid; 
            border-bottom-color: #000000; border-bottom-style: Solid; 
            border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
             2450123.8</td>
            <td align="right" style="padding-right: 10px; padding-left: 10px; 
            border-right-color: #000000; border-right-style: Solid; 
            border-bottom-color: #000000; border-bottom-style: Solid; 
            border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
            0.0</td>
            <td style="padding-right: 10px; padding-left: 10px; 
            border-right-color: #000000; border-right-style: Solid; 
            border-bottom-color: #000000; border-bottom-style: Solid; 
            border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
            JD method</td>
            </tr>
            <tr>
            <td align="right" style="padding-right: 10px; padding-left: 10px; 
            border-left-color: #000000; border-left-style: Solid; 
            border-right-color: #000000; border-right-style: Solid; 
            border-bottom-color: #000000; border-bottom-style: Solid; 
            border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
            2451545.0</td>
            <td align="right" style="padding-right: 10px; padding-left: 10px; 
            border-right-color: #000000; border-right-style: Solid; 
            border-bottom-color: #000000; border-bottom-style: Solid; 
            border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
            -1421.3</td>
            <td style="padding-right: 10px; padding-left: 10px; 
            border-right-color: #000000; border-right-style: Solid; 
            border-bottom-color: #000000; border-bottom-style: Solid; 
            border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
            J2000 method</td>
            </tr>
            <tr>
            <td align="right" style="padding-right: 10px; padding-left: 10px; 
            border-left-color: #000000; border-left-style: Solid; 
            border-right-color: #000000; border-right-style: Solid; 
            border-bottom-color: #000000; border-bottom-style: Solid; 
            border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
            2400000.5</td>
            <td align="right" style="padding-right: 10px; padding-left: 10px; 
            border-right-color: #000000; border-right-style: Solid; 
            border-bottom-color: #000000; border-bottom-style: Solid; 
            border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
            50123.2</td>
            <td style="padding-right: 10px; padding-left: 10px; 
            border-right-color: #000000; border-right-style: Solid; 
            border-bottom-color: #000000; border-bottom-style: Solid; 
            border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
            MJD method</td>
            </tr>
            <tr>
            <td align="right" style="padding-right: 10px; padding-left: 10px; 
            border-left-color: #000000; border-left-style: Solid; 
            border-right-color: #000000; border-right-style: Solid; 
            border-bottom-color: #000000; border-bottom-style: Solid; 
            border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
            2450123.5</td>
            <td align="right" style="padding-right: 10px; padding-left: 10px; 
            border-right-color: #000000; border-right-style: Solid; 
            border-bottom-color: #000000; border-bottom-style: Solid; 
            border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
            0.2</td>
            <td style="padding-right: 10px; padding-left: 10px; 
            border-right-color: #000000; border-right-style: Solid; 
            border-bottom-color: #000000; border-bottom-style: Solid; 
            border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
            Date and time method</td>
            </tr>
            </table>
            <para>The JD method is the most natural and convenient to use in cases where the loss of several decimal digits of resolution is acceptable.  The J2000 method is best matched to the way the argument is handled internally 
            and will deliver the optimum resolution.  The MJD method and the date and time methods are both good compromises between resolution and convenience.  For most applications of this function the choice will not be at all critical.</para>
            <para>TT can be used instead of TDB without any significant impact on accuracy.</para>
            </description></item>
            <item><description>The available accuracy is better than 1 milliarcsecond, limited mainly by the precession-nutation model that is used, namely IAU 2000A/2006.  Very close to solar system bodies, additional 
            errors of up to several milliarcseconds can occur because of unmodelled light deflection;  however, the Sun's contribution is taken into account, to first order.The accuracy limitations of 
            the SOFA function iauEpv00 (used to compute Earth position and velocity) can contribute aberration errors of up to 5 microarcseconds.  Light deflection at the Sun's limb is uncertain at the 0.4 mas level.</description></item>
            <item><description>Should the transformation to (equinox based) apparent place be required rather than (CIO based) intermediate place, subtract the equation of the origins from the returned right ascension:
            RA = RI - EO. (The Anp function can then be applied, as required, to keep the result in the conventional 0-2pi range.)</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:ASCOM.Tools.Sofa.Atco13(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            ICRS RA,Dec to observed place using the SOFA Atco13 function.
            </summary>
            <param name="rc">ICRS RA (radians, note 1)</param>
            <param name="dc">ICRS Dec (radians, note 2)</param>
            <param name="pr">RA Proper motion (radians/year)</param>
            <param name="pd">Dec Proper motion (radians/year</param>
            <param name="px">Parallax (arcsec)</param>
            <param name="rv">Radial velocity (Km/s, +ve if receding</param>
            <param name="utc1">UTC Julian date (part 1, notes 3,4)</param>
            <param name="utc2">UTC Julian date (part 2, notes 3,4)</param>
            <param name="dut1">UT1 - UTC (seconds, note 5)</param>
            <param name="elong">Site longitude (radians, note 6)</param>
            <param name="phi">Site Latitude (radians, note 6)</param>
            <param name="hm">Site Height (meters, notes 6,8)</param>
            <param name="xp">Polar motion co-ordinate (radians, note 7)</param>
            <param name="yp">Polar motion co-ordinate (radians,note 7)</param>
            <param name="phpa">Site Pressure (hPa = mB, note 8)</param>
            <param name="tc">Site Temperature (C)</param>
            <param name="rh">Site relative humidity (fraction in the range: 0.0 to 1.0)</param>
            <param name="wl">Observation wavem=length (micrometres, note 9)</param>
            <param name="aob">Observed Azimuth (radians)</param>
            <param name="zob">Observed Zenith distance (radians)</param>
            <param name="hob">Observed Hour Angle (radians)</param>
            <param name="dob">Observed Declination (radians)</param>
            <param name="rob">Observed RA (radians)</param>
            <param name="eo">Equation of the origins (ERA-GST)</param>
            <returns>+1 = dubious year (Note 4), 0 = OK, -1 = unacceptable date</returns>
            <remarks>
            Notes:
            <list type="number">
            <item><description>Star data for an epoch other than J2000.0 (for example from the Hipparcos catalog, which has an epoch of J1991.25) will require a preliminary call to iauPmsafe before use.</description></item>
            <item><description>The proper motion in RA is dRA/dt rather than cos(Dec)*dRA/dt.</description></item>
            <item><description>utc1+utc2 is quasi Julian Date (see Note 2), apportioned in any convenient way between the two arguments, for example where utc1 is the Julian Day Number and utc2 is the fraction of a day.
            <para>However, JD cannot unambiguously represent UTC during a leap second unless special measures are taken.  The convention in the present function is that the JD day represents UTC days whether the length is 86399, 86400 or 86401 SI seconds.</para>
            <para>Applications should use the function iauDtf2d to convert from calendar date and time of day into 2-part quasi Julian Date, as it implements the leap-second-ambiguity convention just described.</para></description></item>
            <item><description>The warning status "dubious year" flags UTCs that predate the introduction of the time scale or that are too far in the future to be trusted.  See iauDat for further details.</description></item>
            <item><description>UT1-UTC is tabulated in IERS bulletins.  It increases by exactly one second at the end of each positive UTC leap second, introduced in order to keep UT1-UTC within +/- 0.9s.  n.b. This practice is under review, and in the future UT1-UTC may grow essentially without limit.</description></item>
            <item><description>The geographical coordinates are with respect to the WGS84 reference ellipsoid.  TAKE CARE WITH THE LONGITUDE SIGN:  the longitude required by the present function is east-positive (i.e. right-handed), in accordance with geographical convention.</description></item>
            <item><description>The polar motion xp,yp can be obtained from IERS bulletins.  The values are the coordinates (in radians) of the Celestial Intermediate Pole with respect to the International Terrestrial Reference System (see IERS Conventions 2003), measured along the meridians 0 and 90 deg west respectively.  For many applications, xp and yp can be set to zero.</description></item>
            <item><description>If hm, the height above the ellipsoid of the observing station in meters, is not known but phpa, the pressure in hPa (=mB), is available, an adequate estimate of hm can be obtained from the expression:
            <p style="margin-left:25px;font-family:Lucida Conosle,Monospace"><b>hm = -29.3 * tsl * log ( phpa / 1013.25 );</b></p>
            <para>where tsl is the approximate sea-level air temperature in K (See Astrophysical Quantities, C.W.Allen, 3rd edition, section 52).  Similarly, if the pressure phpa is not known, it can be estimated from the height of the observing station, hm, as follows:</para>
            <p style="margin-left:25px;font-family:Lucida Conosle,Monospace"><b>phpa = 1013.25 * exp ( -hm / ( 29.3 * tsl ) );</b></p>
            <para>Note, however, that the refraction is nearly proportional to the pressure and that an accurate phpa value is important for precise work.</para></description></item>
            <item><description>The argument wl specifies the observing wavelength in micrometers.  The transition from optical to radio is assumed to occur at 100 micrometers (about 3000 GHz).</description></item>
            <item><description>The accuracy of the result is limited by the corrections for refraction, which use a simple A*tan(z) + B*tan^3(z) model. Providing the meteorological parameters are known accurately and there are no gross local effects, the predicted observed coordinates should be within 0.05 arcsec (optical) or 1 arcsec (radio) for a zenith distance of less than 70 degrees, better than 30 arcsec (optical or radio) at 85 degrees and better than 20 arcmin (optical) or 30 arcmin (radio) at the horizon.
            <para>Without refraction, the complementary functions iauAtco13 and iauAtoc13 are self-consistent to better than 1 microarcsecond all over the celestial sphere.  With refraction included, consistency falls off at high zenith distances, but is still better than 0.05 arcsec at 85 degrees.</para></description></item>
            <item><description>"Observed" Az,ZD means the position that would be seen by a perfect geodetically aligned theodolite.  (Zenith distance is used rather than altitude in order to reflect the fact that no allowance is made for depression of the horizon.)  This is related to the observed HA,Dec via the standard rotation, using the geodetic latitude (corrected for polar motion), while the observed HA and RA are related simply through the Earth rotation angle and the site longitude.  "Observed" RA,Dec or HA,Dec thus means the position that would be seen by a perfect equatorial with its polar axis aligned to the Earth's axis of rotation.</description></item>
            <item><description>It is advisable to take great care with units, as even unlikely values of the input parameters are accepted and processed in accordance with the models used.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:ASCOM.Tools.Sofa.Atic13(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Transform star RA,Dec from geocentric CIRS to ICRS astrometric using the SOFA Atic13 function.
            </summary>
            <param name="ri">CIRS geocentric RA (radians)</param>
            <param name="di">CIRS geocentric Dec (radians)</param>
            <param name="date1">TDB as a 2-part Julian Date (Note 1)</param>
            <param name="date2">TDB as a 2-part Julian Date (Note 1)</param>
            <param name="rc">ICRS astrometric RA (radians)</param>
            <param name="dc">ICRS astrometric Dec (radians)</param>
            <param name="eo">equation of the origins (ERA-GST, Note 4)</param>
            <remarks>
            Notes:
            <list type="number">
            <item><description> The TDB date date1+date2 is a Julian Date, apportioned in any convenient way between the two arguments.  For example, JD(TDB)=2450123.8g could be expressed in any of these ways, among others:
            <table style="width:340px;" cellspacing="0">
            <col style="width:80px;"></col>
            <col style="width:80px;"></col>
            <col style="width:180px;"></col>
            <tr>
            <td colspan="1" align="center" rowspan="1" style="width: 80px; padding-right: 10px; padding-left: 10px; 
            border-left-color: #000000; border-left-style: Solid; 
            border-top-color: #000000; border-top-style: Solid; 
            border-right-color: #000000; border-right-style: Solid;
            border-bottom-color: #000000; border-bottom-style: Solid; 
            border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; 
            background-color: #00ffff;" width="110px">
            <b>Date 1</b></td>
            <td colspan="1" rowspan="1" align="center" style="width: 80px; padding-right: 10px; padding-left: 10px; 
            border-top-color: #000000; border-top-style: Solid; 
            border-right-style: Solid; border-right-color: #000000; 
            border-bottom-color: #000000; border-bottom-style: Solid; 
            border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; 
            background-color: #00ffff;" width="110px">
            <b>Date 2</b></td>
            <td colspan="1" rowspan="1" align="center" style="width: 180px; padding-right: 10px; padding-left: 10px; 
            border-top-color: #000000; border-top-style: Solid; 
            border-right-style: Solid; border-right-color: #000000; 
            border-bottom-color: #000000; border-bottom-style: Solid; 
            border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; 
            background-color: #00ffff;" width="220px">
            <b>Method</b></td>
            </tr>
            <tr>
            <td align="right" style="padding-right: 10px; padding-left: 10px; 
            border-left-color: #000000; border-left-style: Solid; 
            border-right-color: #000000; border-right-style: Solid; 
            border-bottom-color: #000000; border-bottom-style: Solid; 
            border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
             2450123.8</td>
            <td align="right" style="padding-right: 10px; padding-left: 10px; 
            border-right-color: #000000; border-right-style: Solid; 
            border-bottom-color: #000000; border-bottom-style: Solid; 
            border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
            0.0</td>
            <td style="padding-right: 10px; padding-left: 10px; 
            border-right-color: #000000; border-right-style: Solid; 
            border-bottom-color: #000000; border-bottom-style: Solid; 
            border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
            JD method</td>
            </tr>
            <tr>
            <td align="right" style="padding-right: 10px; padding-left: 10px; 
            border-left-color: #000000; border-left-style: Solid; 
            border-right-color: #000000; border-right-style: Solid; 
            border-bottom-color: #000000; border-bottom-style: Solid; 
            border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
            2451545.0</td>
            <td align="right" style="padding-right: 10px; padding-left: 10px; 
            border-right-color: #000000; border-right-style: Solid; 
            border-bottom-color: #000000; border-bottom-style: Solid; 
            border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
            -1421.3</td>
            <td style="padding-right: 10px; padding-left: 10px; 
            border-right-color: #000000; border-right-style: Solid; 
            border-bottom-color: #000000; border-bottom-style: Solid; 
            border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
            J2000 method</td>
            </tr>
            <tr>
            <td align="right" style="padding-right: 10px; padding-left: 10px; 
            border-left-color: #000000; border-left-style: Solid; 
            border-right-color: #000000; border-right-style: Solid; 
            border-bottom-color: #000000; border-bottom-style: Solid; 
            border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
            2400000.5</td>
            <td align="right" style="padding-right: 10px; padding-left: 10px; 
            border-right-color: #000000; border-right-style: Solid; 
            border-bottom-color: #000000; border-bottom-style: Solid; 
            border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
            50123.2</td>
            <td style="padding-right: 10px; padding-left: 10px; 
            border-right-color: #000000; border-right-style: Solid; 
            border-bottom-color: #000000; border-bottom-style: Solid; 
            border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
            MJD method</td>
            </tr>
            <tr>
            <td align="right" style="padding-right: 10px; padding-left: 10px; 
            border-left-color: #000000; border-left-style: Solid; 
            border-right-color: #000000; border-right-style: Solid; 
            border-bottom-color: #000000; border-bottom-style: Solid; 
            border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
            2450123.5</td>
            <td align="right" style="padding-right: 10px; padding-left: 10px; 
            border-right-color: #000000; border-right-style: Solid; 
            border-bottom-color: #000000; border-bottom-style: Solid; 
            border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
            0.2</td>
            <td style="padding-right: 10px; padding-left: 10px; 
            border-right-color: #000000; border-right-style: Solid; 
            border-bottom-color: #000000; border-bottom-style: Solid; 
            border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
            Date and time method</td>
            </tr>
            </table>
            <para>The JD method is the most natural and convenient to use in cases where the loss of several decimal digits of resolution is acceptable.  The J2000 method is best matched to the way the argument is handled internally 
            and will deliver the optimum resolution.  The MJD method and the date and time methods are both good compromises between resolution and convenience.  For most applications of this function the choice will not be at all critical.</para>
            <para>TT can be used instead of TDB without any significant impact on accuracy.</para>
            </description></item>
            <item><description>Iterative techniques are used for the aberration and light deflection corrections so that the functions Atic13 and Atci13 are accurate inverses; 
            even at the edge of the Sun's disk the discrepancy is only about 1 nanoarcsecond.</description></item>
            <item><description>The available accuracy is better than 1 milliarcsecond, limited mainly by the precession-nutation model that is used, namely IAU 2000A/2006.  Very close to solar system bodies, additional 
            errors of up to several milliarcseconds can occur because of unmodelled light deflection;  however, the Sun's contribution is taken into account, to first order.The accuracy limitations of 
            the SOFA function iauEpv00 (used to compute Earth position and velocity) can contribute aberration errors of up to 5 microarcseconds.  Light deflection at the Sun's limb is uncertain at the 0.4 mas level.</description></item>
            <item><description>Should the transformation to (equinox based) J2000.0 mean place be required rather than (CIO based) ICRS coordinates, subtract the equation of the origins from the returned right ascension:
            RA = RI - EO.  (The Anp function can then be applied, as required, to keep the result in the conventional 0-2pi range.)</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:ASCOM.Tools.Sofa.Atoc13(System.String,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
             <summary>
             Observed place at a ground based site to ICRS astrometric RA,Dec using the SOFA Atoc13 function.
             </summary>
             <param name="type">type of coordinates - "R", "H" or "A" (Notes 1,2)</param>
             <param name="ob1">observed Az, HA or RA (radians; Az is N=0,E=90)</param>
             <param name="ob2"> observed ZD or Dec (radians)</param>
             <param name="utc1">UTC as a 2-part quasi Julian Date (Notes 3,4)</param>
             <param name="utc2">UTC as a 2-part quasi Julian Date (Notes 3,4)</param>
             <param name="dut1">UT1-UTC (seconds, Note 5)</param>
             <param name="elong">longitude (radians, east +ve, Note 6)</param>
             <param name="phi">geodetic latitude (radians, Note 6)</param>
             <param name="hm">height above ellipsoid (m, geodetic Notes 6,8)</param>
             <param name="xp">polar motion coordinates (radians, Note 7)</param>
             <param name="yp">polar motion coordinates (radians, Note 7)</param>
             <param name="phpa">pressure at the observer (hPa = mB, Note 8)</param>
             <param name="tc">ambient temperature at the observer (deg C)</param>
             <param name="rh">relative humidity at the observer (range 0-1)</param>
             <param name="wl">wavelength (micrometers, Note 9)</param>
             <param name="rc">ICRS astrometric RA (radians)</param>
             <param name="dc">ICRS astrometric Dec (radians)</param>
             <returns>Status: +1 = dubious year (Note 4), 0 = OK, -1 = unacceptable date</returns>
             <remarks>
             <para>Notes:</para>
             <list type="number">
             <item><description>"Observed" Az,ZD means the position that would be seen by a perfect geodetically aligned theodolite.  (Zenith distance is used rather than altitude in order to reflect the fact that no
             allowance is made for depression of the horizon.)  This is related to the observed HA,Dec via the standard rotation, using the geodetic latitude (corrected for polar motion), while the
             observed HA and RA are related simply through the Earth rotation angle and the site longitude.  "Observed" RA,Dec or HA,Dec thus means the position that would be seen by a perfect equatorial with its polar axis aligned to the Earth's axis of rotation.</description></item>
             <item><description>Only the first character of the type argument is significant. "R" or "r" indicates that ob1 and ob2 are the observed right ascension and declination;  "H" or "h" indicates that they are hour angle (west +ve) and declination;  anything else ("A" or
             "a" is recommended) indicates that ob1 and ob2 are azimuth (north zero, east 90 deg) and zenith distance.</description></item>
             <item><description>utc1+utc2 is quasi Julian Date (see Note 2), apportioned in any convenient way between the two arguments, for example where utc1 is the Julian Day Number and utc2 is the fraction of a day.
             <para>However, JD cannot unambiguously represent UTC during a leap second unless special measures are taken.  The convention in the present function is that the JD day represents UTC days whether the length is 86399, 86400 or 86401 SI seconds.</para>
             <para>Applications should use the function iauDtf2d to convert from calendar date and time of day into 2-part quasi Julian Date, as it implements the leap-second-ambiguity convention just described.</para></description></item>
             <item><description>The warning status "dubious year" flags UTCs that predate the introduction of the time scale or that are too far in the future to be trusted.  See iauDat for further details.</description></item>
             <item><description>UT1-UTC is tabulated in IERS bulletins.  It increases by exactly one second at the end of each positive UTC leap second, introduced in order to keep UT1-UTC within +/- 0.9s.  n.b. This practice is under review, and in the future UT1-UTC may grow essentially without limit.</description></item>
             <item><description>The geographical coordinates are with respect to the WGS84 reference ellipsoid.  TAKE CARE WITH THE LONGITUDE SIGN:  the longitude required by the present function is east-positive (i.e. right-handed), in accordance with geographical convention.</description></item>
             <item><description>The polar motion xp,yp can be obtained from IERS bulletins.  The values are the coordinates (in radians) of the Celestial Intermediate Pole with respect to the International Terrestrial Reference System (see IERS Conventions 2003), measured along the
             meridians 0 and 90 deg west respectively.  For many applications, xp and yp can be set to zero.</description></item>
             <item><description>If hm, the height above the ellipsoid of the observing station in meters, is not known but phpa, the pressure in hPa (=mB), is available, an adequate estimate of hm can be obtained from the expression:
             <p style="margin-left:25px;font-family:Lucida Conosle,Monospace"><b>hm = -29.3 * tsl * log ( phpa / 1013.25 );</b></p>
             <para>where tsl is the approximate sea-level air temperature in K (See Astrophysical Quantities, C.W.Allen, 3rd edition, section 52).  Similarly, if the pressure phpa is not known, it can be estimated from the height of the observing station, hm, as follows:</para>
             <p style="margin-left:25px;font-family:Lucida Conosle,Monospace"><b>phpa = 1013.25 * exp ( -hm / ( 29.3 * tsl ) );</b></p>
             <para>Note, however, that the refraction is nearly proportional to the pressure and that an accurate phpa value is important for precise work.</para></description></item>
             <item><description>The argument wl specifies the observing wavelength in micrometers.  The transition from optical to radio is assumed to occur at 100 micrometers (about 3000 GHz).</description></item>
             <item><description>The accuracy of the result is limited by the corrections for refraction, which use a simple A*tan(z) + B*tan^3(z) model. Providing the meteorological parameters are known accurately and
             there are no gross local effects, the predicted astrometric coordinates should be within 0.05 arcsec (optical) or 1 arcsec (radio) for a zenith distance of less than 70 degrees, better than 30 arcsec (optical or radio) at 85 degrees and better
             than 20 arcmin (optical) or 30 arcmin (radio) at the horizon.
            <para>Without refraction, the complementary functions iauAtco13 and iauAtoc13 are self-consistent to better than 1 microarcsecond all over the celestial sphere.  With refraction included, consistency falls off at high zenith distances, but is still better than 0.05 arcsec at 85 degrees.</para></description></item>
             <item><description>It is advisable to take great care with units, as even unlikely values of the input parameters are accepted and processed in accordance with the models used.</description></item>
             </list>
             </remarks>
        </member>
        <member name="M:ASCOM.Tools.Sofa.Atio13(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            CIRS RA,Dec to observed place using the SOFA Atio13 funciton.
            </summary>
            <param name="ri">CIRS right ascension (CIO-based, radians)</param>
            <param name="di">CIRS declination (radians)</param>
            <param name="utc1">UTC as a 2-part quasi Julian Date (Notes 1,2)</param>
            <param name="utc2">UTC as a 2-part quasi Julian Date (Notes 1,2)</param>
            <param name="dut1">UT1-UTC (seconds, Note 3)</param>
            <param name="elong">longitude (radians, east +ve, Note 4)</param>
            <param name="phi">geodetic latitude (radians, Note 4)</param>
            <param name="hm">height above ellipsoid (m, geodetic Notes 4,6)</param>
            <param name="xp">polar motion coordinates (radians, Note 5)</param>
            <param name="yp">polar motion coordinates (radians, Note 5)</param>
            <param name="phpa">pressure at the observer (hPa = mB, Note 6)</param>
            <param name="tc">ambient temperature at the observer (deg C)</param>
            <param name="rh">relative humidity at the observer (range 0-1)</param>
            <param name="wl">wavelength (micrometers, Note 7)</param>
            <param name="aob">observed azimuth (radians: N=0,E=90)</param>
            <param name="zob">observed zenith distance (radians)</param>
            <param name="hob">observed hour angle (radians)</param>
            <param name="dob">observed declination (radians)</param>
            <param name="rob">observed right ascension (CIO-based, radians)</param>
            <returns> Status: +1 = dubious year (Note 2), 0 = OK, -1 = unacceptable date</returns>
            <remarks>
            <para>Notes:</para>
            <list type="number">
            <item><description>utc1+utc2 is quasi Julian Date (see Note 2), apportioned in any convenient way between the two arguments, for example where utc1 is the Julian Day Number and utc2 is the fraction of a day.
            <para>However, JD cannot unambiguously represent UTC during a leap second unless special measures are taken.  The convention in the present function is that the JD day represents UTC days whether the length is 86399, 86400 or 86401 SI seconds.</para>
            <para>Applications should use the function iauDtf2d to convert from calendar date and time of day into 2-part quasi Julian Date, as it implements the leap-second-ambiguity convention just described.</para></description></item>
            <item><description>The warning status "dubious year" flags UTCs that predate the introduction of the time scale or that are too far in the future to be trusted.  See iauDat for further details.</description></item>
            <item><description>UT1-UTC is tabulated in IERS bulletins.  It increases by exactly one second at the end of each positive UTC leap second, introduced in order to keep UT1-UTC within +/- 0.9s.  n.b. This practice is under review, and in the future UT1-UTC may grow essentially without limit.</description></item>
            <item><description>The geographical coordinates are with respect to the WGS84 reference ellipsoid.  TAKE CARE WITH THE LONGITUDE SIGN:  the longitude required by the present function is east-positive (i.e. right-handed), in accordance with geographical convention.</description></item>
            <item><description>The polar motion xp,yp can be obtained from IERS bulletins.  The values are the coordinates (in radians) of the Celestial Intermediate Pole with respect to the International Terrestrial
            Reference System (see IERS Conventions 2003), measured along the meridians 0 and 90 deg west respectively.  For many applications, xp and yp can be set to zero.</description></item>
            <item><description>If hm, the height above the ellipsoid of the observing station in meters, is not known but phpa, the pressure in hPa (=mB), is available, an adequate estimate of hm can be obtained from the expression:
            <p style="margin-left:25px;font-family:Lucida Conosle,Monospace"><b>hm = -29.3 * tsl * log ( phpa / 1013.25 );</b></p>
            <para>where tsl is the approximate sea-level air temperature in K (See Astrophysical Quantities, C.W.Allen, 3rd edition, section 52).  Similarly, if the pressure phpa is not known, it can be estimated from the height of the observing station, hm, as follows:</para>
            <p style="margin-left:25px;font-family:Lucida Conosle,Monospace"><b>phpa = 1013.25 * exp ( -hm / ( 29.3 * tsl ) );</b></p>
            <para>Note, however, that the refraction is nearly proportional to the pressure and that an accurate phpa value is important for precise work.</para></description></item>
            <item><description>The argument wl specifies the observing wavelength in micrometers.  The transition from optical to radio is assumed to occur at 100 micrometers (about 3000 GHz).</description></item>
            <item><description>"Observed" Az,ZD means the position that would be seen by a perfect geodetically aligned theodolite.  (Zenith distance is used rather than altitude in order to reflect the fact that no
            allowance is made for depression of the horizon.)  This is related to the observed HA,Dec via the standard rotation, using the geodetic latitude (corrected for polar motion), while the observed HA and RA are related simply through the Earth rotation
            angle and the site longitude.  "Observed" RA,Dec or HA,Dec thus means the position that would be seen by a perfect equatorial with its polar axis aligned to the Earth's axis of rotation.</description></item>
            <item><description>The accuracy of the result is limited by the corrections for refraction, which use a simple A*tan(z) + B*tan^3(z) model. Providing the meteorological parameters are known accurately and there are no gross local effects, the predicted astrometric
            coordinates should be within 0.05 arcsec (optical) or 1 arcsec (radio) for a zenith distance of less than 70 degrees, better than 30 arcsec (optical or radio) at 85 degrees and better than 20 arcmin (optical) or 30 arcmin (radio) at the horizon.</description></item>
            <item><description>The complementary functions iauAtio13 and iauAtoi13 are self-consistent to better than 1 microarcsecond all over the celestial sphere.</description></item>
            <item><description>It is advisable to take great care with units, as even unlikely values of the input parameters are accepted and processed in accordance with the models used.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:ASCOM.Tools.Sofa.Atoi13(System.String,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
             Observed place to CIRS using the SOFA Atoi13 function.
            </summary>
            <param name="type">type of coordinates - "R", "H" or "A" (Notes 1,2)</param>
            <param name="ob1">observed Az, HA or RA (radians; Az is N=0,E=90)</param>
            <param name="ob2">observed ZD or Dec (radians)</param>
            <param name="utc1">UTC as a 2-part quasi Julian Date (Notes 3,4)</param>
            <param name="utc2">UTC as a 2-part quasi Julian Date (Notes 3,4)</param>
            <param name="dut1">UT1-UTC (seconds, Note 5)</param>
            <param name="elong">longitude (radians, east +ve, Note 6)</param>
            <param name="phi">geodetic latitude (radians, Note 6)</param>
            <param name="hm">height above the ellipsoid (meters, Notes 6,8)</param>
            <param name="xp">polar motion coordinates (radians, Note 7)</param>
            <param name="yp">polar motion coordinates (radians, Note 7)</param>
            <param name="phpa">pressure at the observer (hPa = mB, Note 8)</param>
            <param name="tc">ambient temperature at the observer (deg C)</param>
            <param name="rh">relative humidity at the observer (range 0-1)</param>
            <param name="wl">wavelength (micrometers, Note 9)</param>
            <param name="ri">CIRS right ascension (CIO-based, radians)</param>
            <param name="di">CIRS declination (radians)</param>
            <returns>Status: +1 = dubious year (Note 2), 0 = OK, -1 = unacceptable date</returns>
            <remarks>
            <para>Notes:</para>
            <list type="number">
            <item><description>"Observed" Az,ZD means the position that would be seen by a perfect geodetically aligned theodolite.  (Zenith distance is used rather than altitude in order to reflect the fact that no
            allowance is made for depression of the horizon.)  This is related to the observed HA,Dec via the standard rotation, using the geodetic latitude (corrected for polar motion), while the
            observed HA and RA are related simply through the Earth rotation angle and the site longitude.  "Observed" RA,Dec or HA,Dec thus means the position that would be seen by a perfect equatorial
            with its polar axis aligned to the Earth's axis of rotation.</description></item>
            <item><description>Only the first character of the type argument is significant. "R" or "r" indicates that ob1 and ob2 are the observed right ascension and declination;  "H" or "h" indicates that they are
            hour angle (west +ve) and declination;  anything else ("A" or "a" is recommended) indicates that ob1 and ob2 are azimuth (north zero, east 90 deg) and zenith distance.</description></item>
            <item><description>utc1+utc2 is quasi Julian Date (see Note 2), apportioned in any convenient way between the two arguments, for example where utc1 is the Julian Day Number and utc2 is the fraction of a day.
            <para>However, JD cannot unambiguously represent UTC during a leap second unless special measures are taken.  The convention in the present function is that the JD day represents UTC days whether the length is 86399, 86400 or 86401 SI seconds.</para>
            <para>Applications should use the function iauDtf2d to convert from calendar date and time of day into 2-part quasi Julian Date, as it implements the leap-second-ambiguity convention just described.</para></description></item>
            <item><description>The warning status "dubious year" flags UTCs that predate the introduction of the time scale or that are too far in the future to be trusted.  See iauDat for further details.</description></item>
            <item><description>UT1-UTC is tabulated in IERS bulletins.  It increases by exactly one second at the end of each positive UTC leap second, introduced in order to keep UT1-UTC within +/- 0.9s.  n.b. This
            practice is under review, and in the future UT1-UTC may grow essentially without limit.</description></item>
            <item><description>The geographical coordinates are with respect to the WGS84 reference ellipsoid.  TAKE CARE WITH THE LONGITUDE SIGN:  the longitude required by the present function is east-positive
            (i.e. right-handed), in accordance with geographical convention.</description></item>
            <item><description>The polar motion xp,yp can be obtained from IERS bulletins.  The values are the coordinates (in radians) of the Celestial Intermediate Pole with respect to the International Terrestrial
            Reference System (see IERS Conventions 2003), measured along the meridians 0 and 90 deg west respectively.  For many applications, xp and yp can be set to zero.</description></item>
            <item><description>If hm, the height above the ellipsoid of the observing station in meters, is not known but phpa, the pressure in hPa (=mB), is available, an adequate estimate of hm can be obtained from the expression:
            <p style="margin-left:25px;font-family:Lucida Conosle,Monospace"><b>hm = -29.3 * tsl * log ( phpa / 1013.25 );</b></p>
            <para>where tsl is the approximate sea-level air temperature in K (See Astrophysical Quantities, C.W.Allen, 3rd edition, section 52).  Similarly, if the pressure phpa is not known, it can be estimated from the height of the observing station, hm, as follows:</para>
            <p style="margin-left:25px;font-family:Lucida Conosle,Monospace"><b>phpa = 1013.25 * exp ( -hm / ( 29.3 * tsl ) );</b></p>
            <para>Note, however, that the refraction is nearly proportional to the pressure and that an accurate phpa value is important for precise work.</para></description></item>
            <item><description>The argument wl specifies the observing wavelength in micrometers.  The transition from optical to radio is assumed to occur at 100 micrometers (about 3000 GHz).</description></item>
            <item><description>The accuracy of the result is limited by the corrections for refraction, which use a simple A*tan(z) + B*tan^3(z) model. Providing the meteorological parameters are known accurately and
            there are no gross local effects, the predicted astrometric coordinates should be within 0.05 arcsec (optical) or 1 arcsec (radio) for a zenith distance of less than 70 degrees, better
            than 30 arcsec (optical or radio) at 85 degrees and better than 20 arcmin (optical) or 30 arcmin (radio) at the horizon.
            <para>Without refraction, the complementary functions iauAtio13 and iauAtoi13 are self-consistent to better than 1 microarcsecond all over the celestial sphere.  With refraction included,
            consistency falls off at high zenith distances, but is still better than 0.05 arcsec at 85 degrees.</para></description></item>
            <item><description>It is advisable to take great care with units, as even unlikely values of the input parameters are accepted and processed in accordance with the models used.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:ASCOM.Tools.Sofa.Dtf2d(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Double@,System.Double@)">
            <summary>
            Encode date and time fields into 2-part Julian Date (or in the case of UTC a quasi-JD form that includes special provision for leap seconds).
            </summary>
            <param name="scale">Time scale ID (Note 1)</param>
            <param name="iy">Year in Gregorian calendar (Note 2)</param>
            <param name="im">Month in Gregorian calendar (Note 2)</param>
            <param name="id">Day in Gregorian calendar (Note 2)</param>
            <param name="ihr">Hour</param>
            <param name="imn">Minute</param>
            <param name="sec">Seconds</param>
            <param name="d1">2-part Julian Date (Notes 3, 4)</param>
            <param name="d2">2-part Julian Date (Notes 3, 4)</param>
            <returns>Status: +3 = both of next two, +2 = time is after end of day (Note 5), +1 = dubious year (Note 6), 0 = OK, -1 = bad year, -2 = bad month, -3 = bad day, -4 = bad hour, -5 = bad minute, -6 = bad second (&lt;0)</returns>
            <remarks>
            Notes:
            <list type="number">
            <item><description>Scale identifies the time scale.  Only the value "UTC" (in upper case) is significant, and enables handling of leap seconds (see Note 4).</description></item>
            <item><description>For calendar conventions and limitations, see iauCal2jd.</description></item>
            <item><description>The sum of the results, d1+d2, is Julian Date, where normally d1 is the Julian Day Number and d2 is the fraction of a day.  In the case of UTC, where the use of JD is problematical, special conventions apply:  see the next note.</description></item>
            <item><description>JD cannot unambiguously represent UTC during a leap second unless special measures are taken.  The SOFA internal convention is that the quasi-JD day represents UTC days whether the length is 86399,
            86400 or 86401 SI seconds.  In the 1960-1972 era there were smaller jumps (in either direction) each time the linear UTC(TAI) expression was changed, and these "mini-leaps" are also included in the SOFA convention.</description></item>
            <item><description>The warning status "time is after end of day" usually means that the sec argument is greater than 60.0.  However, in a day ending in a leap second the limit changes to 61.0 (or 59.0 in the case of a negative leap second).</description></item>
            <item><description>The warning status "dubious year" flags UTCs that predate the introduction of the time scale or that are too far in the future to be trusted.  See iauDat for further details.</description></item>
            <item><description>Only in the case of continuous and regular time scales (TAI, TT, TCG, TCB and TDB) is the result d1+d2 a Julian Date, strictly speaking.  In the other cases (UT1 and UTC) the result must be
            used with circumspection;  in particular the difference between two such results cannot be interpreted as a precise time interval.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:ASCOM.Tools.Sofa.Eo06a(System.Double,System.Double)">
            <summary>
            Equation of the origins, IAU 2006 precession and IAU 2000A nutation.
            </summary>
            <param name="date1">TT as a 2-part Julian Date (Note 1)</param>
            <param name="date2">TT as a 2-part Julian Date (Note 1)</param>
            <returns>Equation of the origins in radians (Note 2)</returns>
            <remarks>
            Notes:
            <list type="number">
            <item><description> The TT date date1+date2 is a Julian Date, apportioned in any convenient way between the two arguments.  For example, JD(TT)=2450123.7 could be expressed in any of these ways, among others:
            <table style="width:340px;" cellspacing="0">
            <col style="width:80px;"></col>
            <col style="width:80px;"></col>
            <col style="width:180px;"></col>
            <tr>
            <td colspan="1" align="center" rowspan="1" style="width: 80px; padding-right: 10px; padding-left: 10px; 
            border-left-color: #000000; border-left-style: Solid; 
            border-top-color: #000000; border-top-style: Solid; 
            border-right-color: #000000; border-right-style: Solid;
            border-bottom-color: #000000; border-bottom-style: Solid; 
            border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; 
            background-color: #00ffff;" width="110px">
            <b>Date 1</b></td>
            <td colspan="1" rowspan="1" align="center" style="width: 80px; padding-right: 10px; padding-left: 10px; 
            border-top-color: #000000; border-top-style: Solid; 
            border-right-style: Solid; border-right-color: #000000; 
            border-bottom-color: #000000; border-bottom-style: Solid; 
            border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; 
            background-color: #00ffff;" width="110px">
            <b>Date 2</b></td>
            <td colspan="1" rowspan="1" align="center" style="width: 180px; padding-right: 10px; padding-left: 10px; 
            border-top-color: #000000; border-top-style: Solid; 
            border-right-style: Solid; border-right-color: #000000; 
            border-bottom-color: #000000; border-bottom-style: Solid; 
            border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; 
            background-color: #00ffff;" width="220px">
            <b>Method</b></td>
            </tr>
            <tr>
            <td align="right" style="padding-right: 10px; padding-left: 10px; 
            border-left-color: #000000; border-left-style: Solid; 
            border-right-color: #000000; border-right-style: Solid; 
            border-bottom-color: #000000; border-bottom-style: Solid; 
            border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
             2450123.7</td>
            <td align="right" style="padding-right: 10px; padding-left: 10px; 
            border-right-color: #000000; border-right-style: Solid; 
            border-bottom-color: #000000; border-bottom-style: Solid; 
            border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
            0.0</td>
            <td style="padding-right: 10px; padding-left: 10px; 
            border-right-color: #000000; border-right-style: Solid; 
            border-bottom-color: #000000; border-bottom-style: Solid; 
            border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
            JD method</td>
            </tr>
            <tr>
            <td align="right" style="padding-right: 10px; padding-left: 10px; 
            border-left-color: #000000; border-left-style: Solid; 
            border-right-color: #000000; border-right-style: Solid; 
            border-bottom-color: #000000; border-bottom-style: Solid; 
            border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
            2451545.0</td>
            <td align="right" style="padding-right: 10px; padding-left: 10px; 
            border-right-color: #000000; border-right-style: Solid; 
            border-bottom-color: #000000; border-bottom-style: Solid; 
            border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
            -1421.3</td>
            <td style="padding-right: 10px; padding-left: 10px; 
            border-right-color: #000000; border-right-style: Solid; 
            border-bottom-color: #000000; border-bottom-style: Solid; 
            border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
            J2000 method</td>
            </tr>
            <tr>
            <td align="right" style="padding-right: 10px; padding-left: 10px; 
            border-left-color: #000000; border-left-style: Solid; 
            border-right-color: #000000; border-right-style: Solid; 
            border-bottom-color: #000000; border-bottom-style: Solid; 
            border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
            2400000.5</td>
            <td align="right" style="padding-right: 10px; padding-left: 10px; 
            border-right-color: #000000; border-right-style: Solid; 
            border-bottom-color: #000000; border-bottom-style: Solid; 
            border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
            50123.2</td>
            <td style="padding-right: 10px; padding-left: 10px; 
            border-right-color: #000000; border-right-style: Solid; 
            border-bottom-color: #000000; border-bottom-style: Solid; 
            border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
            MJD method</td>
            </tr>
            <tr>
            <td align="right" style="padding-right: 10px; padding-left: 10px; 
            border-left-color: #000000; border-left-style: Solid; 
            border-right-color: #000000; border-right-style: Solid; 
            border-bottom-color: #000000; border-bottom-style: Solid; 
            border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
            2450123.5</td>
            <td align="right" style="padding-right: 10px; padding-left: 10px; 
            border-right-color: #000000; border-right-style: Solid; 
            border-bottom-color: #000000; border-bottom-style: Solid; 
            border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
            0.2</td>
            <td style="padding-right: 10px; padding-left: 10px; 
            border-right-color: #000000; border-right-style: Solid; 
            border-bottom-color: #000000; border-bottom-style: Solid; 
            border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
            Date and time method</td>
            </tr>
            </table>
            <para>The JD method is the most natural and convenient to use in cases where the loss of several decimal digits of resolution is acceptable.  The J2000 method is best matched to the way the argument is handled internally 
            and will deliver the optimum resolution.  The MJD method and the date and time methods are both good compromises between resolution and convenience.  For most applications of this function the choice will not be at all critical.</para>
            </description></item>
            <item><description> The equation of the origins is the distance between the true equinox and the celestial intermediate origin and, equivalently, the difference between Earth rotation angle and Greenwich
            apparent sidereal time (ERA-GST).  It comprises the precession (since J2000.0) in right ascension plus the equation of the equinoxes (including the small correction terms).</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:ASCOM.Tools.Sofa.Taitt(System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Time scale transformation:  International Atomic Time, TAI, to Terrestrial Time, TT.
            </summary>
            <param name="tai1">TAI as a 2-part Julian Date</param>
            <param name="tai2">TAI as a 2-part Julian Date</param>
            <param name="tt1">TT as a 2-part Julian Date</param>
            <param name="tt2">TT as a 2-part Julian Date</param>
            <returns>Status:  0 = OK</returns>
            <remarks>
            Notes:
            <list type="number">
            <item><description> tai1+tai2 is Julian Date, apportioned in any convenient way between the two arguments, for example where tai1 is the Julian Day Number and tai2 is the fraction of a day.  The returned
            tt1,tt2 follow suit.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:ASCOM.Tools.Sofa.Tttai(System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Time scale transformation:  Terrestrial Time, TT, to International Atomic Time, TAI.
            </summary>
            <param name="tt1">TT as a 2-part Julian Date</param>
            <param name="tt2">TT as a 2-part Julian Date</param>
            <param name="tai1">TAI as a 2-part Julian Date</param>
            <param name="tai2">TAI as a 2-part Julian Date</param>
            <returns>Status:  0 = OK</returns>
            <remarks>
            Note
            <list type="number">
            <item><description>tt1+tt2 is Julian Date, apportioned in any convenient way between the two arguments, for example where tt1 is the Julian Day Number and tt2 is the fraction of a day.  The returned tai1,tai2 follow suit.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:ASCOM.Tools.Sofa.Tf2a(System.Char,System.Int16,System.Int16,System.Double,System.Double@)">
            <summary>
            Convert hours, minutes, seconds to radians.
            </summary>
            <param name="s">sign:  '-' = negative, otherwise positive</param>
            <param name="ihour">Hours</param>
            <param name="imin">Minutes</param>
            <param name="sec">Seconds</param>
            <param name="rad">Angle in radians</param>
            <returns>Status:  0 = OK, 1 = ihour outside range 0-23, 2 = imin outside range 0-59, 3 = sec outside range 0-59.999...</returns>
            <remarks>
            Notes:
            <list type="number">
            <item><description>The result is computed even if any of the range checks fail.</description></item>
            <item><description>Negative ihour, imin and/or sec produce a warning status, but the absolute value is used in the conversion.</description></item>
            <item><description>If there are multiple errors, the status value reflects only the first, the smallest taking precedence.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:ASCOM.Tools.Sofa.Utctai(System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Time scale transformation:  Coordinated Universal Time, UTC, to International Atomic Time, TAI.
            </summary>
            <param name="utc1">UTC as a 2-part quasi Julian Date (Notes 1-4)</param>
            <param name="utc2">UTC as a 2-part quasi Julian Date (Notes 1-4)</param>
            <param name="tai1">TAI as a 2-part Julian Date (Note 5)</param>
            <param name="tai2">TAI as a 2-part Julian Date (Note 5)</param>
            <returns>Status: +1 = dubious year (Note 3) 0 = OK -1 = unacceptable date</returns>
            <remarks>
            Notes:
            <list type="number">
            <item><description>utc1+utc2 is quasi Julian Date (see Note 2), apportioned in any convenient way between the two arguments, for example where utc1 is the Julian Day Number and utc2 is the fraction of a day.</description></item>
            <item><description>JD cannot unambiguously represent UTC during a leap second unless special measures are taken.  The convention in the present function is that the JD day represents UTC days whether the
            length is 86399, 86400 or 86401 SI seconds.  In the 1960-1972 era there were smaller jumps (in either direction) each time the linear UTC(TAI) expression was changed, and these "mini-leaps" are also included in the SOFA convention.</description></item>
            <item><description>The warning status "dubious year" flags UTCs that predate the introduction of the time scale or that are too far in the future to be trusted.  See iauDat for further details.</description></item>
            <item><description>The function iauDtf2d converts from calendar date and time of day into 2-part Julian Date, and in the case of UTC implements the leap-second-ambiguity convention described above.</description></item>
            <item><description>The returned TAI1,TAI2 are such that their sum is the TAI Julian Date.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:ASCOM.Tools.Sofa.Taiutc(System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Time scale transformation:  International Atomic Time, TAI, to Coordinated Universal Time, UTC.
            </summary>
            <param name="tai1">TAI as a 2-part Julian Date (Note 1)</param>
            <param name="tai2">TAI as a 2-part Julian Date (Note 1)</param>
            <param name="utc1">UTC as a 2-part quasi Julian Date (Notes 1-3)</param>
            <param name="utc2">UTC as a 2-part quasi Julian Date (Notes 1-3)</param>
            <returns>Status: +1 = dubious year (Note 4), 0 = OK, -1 = unacceptable date</returns>
            <remarks>
            Notes:
            <list type="number">
            <item><description>tai1+tai2 is Julian Date, apportioned in any convenient way between the two arguments, for example where tai1 is the Julian Day Number and tai2 is the fraction of a day.  The returned utc1
            and utc2 form an analogous pair, except that a special convention is used, to deal with the problem of leap seconds - see the next note.</description></item>
            <item><description>JD cannot unambiguously represent UTC during a leap second unless special measures are taken.  The convention in the present function is that the JD day represents UTC days whether the
            length is 86399, 86400 or 86401 SI seconds.  In the 1960-1972 era there were smaller jumps (in either direction) each time the linear UTC(TAI) expression was changed, and these "mini-leaps are also included in the SOFA convention.</description></item>
            <item><description>The function iauD2dtf can be used to transform the UTC quasi-JD into calendar date and clock time, including UTC leap second handling.</description></item>
            <item><description>The warning status "dubious year" flags UTCs that predate the introduction of the time scale or that are too far in the future to be trusted.  See iauDat for further details.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:ASCOM.Tools.Sofa.Dat(System.Int32,System.Int32,System.Int32,System.Double,System.Double@)">
            <summary>
            For a given UTC date, calculate Delta(AT) = TAI−UTC  (number of leap seconds).
            </summary>
            <param name="Year">Year</param>
            <param name="Month">Month</param>
            <param name="Day">Day</param>
            <param name="DayFraction">Fraction of a day</param>
            <param name="ReturnedLeapSeconds">Out: Leap seconds</param>
            <returns>status: 1 = dubious year, 0 = OK, −1 = bad year, −2 = bad month, −3 = bad day, −4 = bad fraction, −5 = internal error</returns>
        </member>
        <member name="T:ASCOM.Tools.TraceLogger">
             <summary>
             Creates a log file for a driver or application. Uses a similar file name and internal format to the serial logger. Multiple logs can be created simultaneously if needed.
             </summary>
             <remarks>
            <para>In automatic mode the file will be stored in an ASCOM folder within XP's My Documents folder or equivalent places
             in other operating systems. Within the ASCOM folder will be a folder named Logs yyyy-mm-dd where yyyy, mm and dd are
             today's year, month and day numbers.The trace file will appear within the day folder with the name
             ASCOM.Identifier.hhmm.ssffff where hh, mm, ss and ffff are the current hour, minute, second and fraction of second
             numbers at the time of file creation.
             </para>
             <para>Within the file the format of each line is hh:mm:ss.fff Identifier Message where hh, mm, ss and fff are the hour, minute, second
             and fractional second at the time that the message was logged, Identifier is the supplied identifier (usually the subroutine,
             function, property or method from which the message is sent) and Message is the message to be logged.</para>
            </remarks>
        </member>
        <member name="M:ASCOM.Tools.TraceLogger.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Create a new TraceLogger instance with the given filename and path
            </summary>
            <param name="logFileName">Name of the log file (without path) or null / empty string to use automatic file naming.</param>
            <param name="logFilePath">Fully qualified path to the log file directory or null / empty string to use an automatically generated path.</param>
            <param name="logFileType">A short name to identify the contents of the log (only used in automatic file names).</param>
            <param name="enabled">Initial state of the trace logger - Enabled or Disabled.</param>
            <remarks>Automatically generated directory names will be of the form: <c>"Documents\ASCOM\Logs {CurrentDate:yyyymmdd}"</c> on Windows and <c>"HOME/ASCOM/Logs{CurrentDate:yyyymmdd}"</c> on Linux
            Automatically generated file names will be of the form: <c>"ASCOM.{LogFileType}.{CurrentTime:HHmm.ssfff}{1 or 2 Digits, usually 0}.txt"</c>.</remarks>
        </member>
        <member name="M:ASCOM.Tools.TraceLogger.#ctor(System.String,System.Boolean,System.Int32,ASCOM.Common.Interfaces.LogLevel)">
            <summary>
            Create a new TraceLogger instance with automatic naming incorporating the supplied log file type
            </summary>
            <param name="logFileType">A short name to identify the contents of the log.</param>
            <param name="enabled">Initial state of the trace logger - Enabled or Disabled.</param>
            <param name="identifierWidth">Width of the identifier field in the log message (Optional parameter, default: 25)</param>
            <param name="logLevel">Log level of the trace logger (Debug, Information, Warning etc.) (Optional parameter, default: LogLevel.Information)</param>
            <remarks>Automatically generated directory names will be of the form: <c>"Documents\ASCOM\Logs {CurrentDate:yyyymmdd}"</c> on Windows and <c>"HOME/ASCOM/Logs{CurrentDate:yyyymmdd}"</c> on Linux
            Automatically generated file names will be of the form: <c>"ASCOM.{LogFileType}.{CurrentTime:HHmm.ssfff}{1 or 2 Digits, usually 0}.txt"</c>.</remarks>
        </member>
        <member name="M:ASCOM.Tools.TraceLogger.CommonInitialisation">
            <summary>
            Common code shared by all initialiser overloads
            </summary>
        </member>
        <member name="M:ASCOM.Tools.TraceLogger.Dispose(System.Boolean)">
            IDisposable
            <summary>
            Disposes of the TraceLogger object
            </summary>
            <param name="disposing">True if being disposed by the application, False if disposed by the finaliser.</param>
            <remarks></remarks>
        </member>
        <member name="M:ASCOM.Tools.TraceLogger.Dispose">
            <summary>
            Disposes of the TraceLogger object
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ASCOM.Tools.TraceLogger.LogMessage(System.String,System.String)">
            <summary>
            Write a message to the trace log
            </summary>
            <param name="identifier">Member name or function name.</param>
            <param name="message">Message text</param>
            <remarks>
            </remarks>
        </member>
        <member name="M:ASCOM.Tools.TraceLogger.BlankLine">
            <summary>
            Insert a blank line into the log file
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:ASCOM.Tools.TraceLogger.Enabled">
            <summary>
            Enable or disable logging to the file.
            </summary>
            <value>True to enable logging</value>
            <returns>Boolean, current logging status (enabled/disabled).</returns>
            <remarks>If this property is False, calls to LogMessage do nothing. If True, messages are written to the log file.</remarks>
        </member>
        <member name="P:ASCOM.Tools.TraceLogger.LogFileName">
            <summary>
            File name of the log file being created
            </summary>
            <value>Filename of the log file without the path.</value>
            <returns>String filename</returns>
            <remarks>This call will return an empty string until the first line has been written to the log file because the file is not created until required.</remarks>
        </member>
        <member name="P:ASCOM.Tools.TraceLogger.LogFilePath">
            <summary>
            Path to the directory in which the log file will be created
            </summary>
            <returns>String path</returns>
            <remarks>This call will return an empty string until the first line has been written to the log file because the file is not created until required.</remarks>
        </member>
        <member name="P:ASCOM.Tools.TraceLogger.IdentifierWidth">
            <summary>
            Set or return the width of the identifier field in the log message
            </summary>
            <value>Width of the identifier field</value>
            <returns>Integer identifier width</returns>
            <exception cref="T:ASCOM.InvalidValueException">If the width is less than 0</exception>
            <remarks>Introduced with Platform 6.4.<para>If set, this width will be used instead of the default identifier field width.</para></remarks>
        </member>
        <member name="P:ASCOM.Tools.TraceLogger.UseUtcTime">
            <summary>
            Set True to use UTC time, set false to use Local time (default true)
            </summary>
        </member>
        <member name="P:ASCOM.Tools.TraceLogger.RespectCrLf">
            <summary>
            Set True to retain carriage return and line feed as control characters. Set false to translate these to [XX] format (default true)
            </summary>
        </member>
        <member name="P:ASCOM.Tools.TraceLogger.LoggingLevel">
            <summary>
            Return the current log level.
            </summary>
        </member>
        <member name="M:ASCOM.Tools.TraceLogger.Log(ASCOM.Common.Interfaces.LogLevel,System.String)">
            <summary>
            Write a message to the log.
            </summary>
            <param name="level">Logging level of this message.</param>
            <param name="message">Message text.</param>
        </member>
        <member name="M:ASCOM.Tools.TraceLogger.SetMinimumLoggingLevel(ASCOM.Common.Interfaces.LogLevel)">
            <summary>
            Set the minimum log level to display.
            </summary>
            <param name="level">Required logging level.</param>
        </member>
        <member name="M:ASCOM.Tools.TraceLogger.CreateLogFile">
            <summary>
            Create the stream writer that will write to the log file
            </summary>
        </member>
        <member name="M:ASCOM.Tools.TraceLogger.MakePrintable(System.String)">
            <summary>
            Translate control characters into printable versions 
            </summary>
            <param name="message">Message to be cleansed</param>
            <returns>Cleaned message string</returns>
            <remarks>Non printable ASCII characters 0::31 and 127 are translated to [XX] format where XX is a two digit hex code. 
            Characters 13 and 10 (carriage return and linefeed) are either translated or left as control characters according to the setting of the RespectCrLf property.
            The default is for these to be left as control characters so that exception stack dumps print properly.</remarks>
        </member>
        <member name="M:ASCOM.Tools.TraceLogger.DateTimeNow">
            <summary>
            Return a dateTime object reflecting Local or UTC time depending on the setting of the UseUtcTime property.
            </summary>
            <returns>DateTime object in either local or UTC time.</returns>
        </member>
        <member name="T:ASCOM.Tools.Transform">
             <summary>
             Coordinate transform component; J2000 - apparent - topocentric
             </summary>
             <remarks>Use this component to transform between J2000, apparent and topocentric (JNow) coordinates or 
             vice versa. To use the component, instantiate it, then use one of SetJ2000 or SetJNow or SetApparent to 
             initialise with known values. Now use the RAJ2000, DECJ200, RAJNow, DECJNow, RAApparent and DECApparent etc. 
             properties to read off the required transformed values.
            <para>The component can be reused simply by setting new co-ordinates with a Set command, there
             is no need to create a new component each time a transform is required.</para>
             <para>Transforms are effected through the ASCOM SOFA component that encapsulates the IAU SOFA library. 
             The IA SOFA reference web page is: 
             <href>https://www.iausofa.org/</href>, which includes links to the SOFA manual and handbook.
             </para>
             </remarks>
        </member>
        <member name="M:ASCOM.Tools.Transform.#ctor">
            <summary>
            Create a Transform component without a logger
            </summary>
        </member>
        <member name="M:ASCOM.Tools.Transform.#ctor(ASCOM.Common.Interfaces.ILogger)">
            <summary>
            Create a Transform component with an ILogger logger
            </summary>
            <param name="logger">Optional ILogger instance that can be used to record operational messages from the Transform component</param>
        </member>
        <member name="M:ASCOM.Tools.Transform.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:ASCOM.Tools.Transform.Dispose">
            <summary>
            Cleans up resources used by the Transform component
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:ASCOM.Tools.Transform.DeltaUT1">
            <summary>
            Set the delta UT1 value to be used by Transform, defaults to 0.0
            </summary>
        </member>
        <member name="P:ASCOM.Tools.Transform.SiteLatitude">
            <summary>
            Gets or sets the site latitude
            </summary>
            <value>Site latitude (-90.0 to +90.0)</value>
            <returns>Latitude in degrees</returns>
            <remarks>Positive numbers north of the equator, negative numbers south.</remarks>
        </member>
        <member name="P:ASCOM.Tools.Transform.SiteLongitude">
            <summary>
            Gets or sets the site longitude
            </summary>
            <value>Site longitude (-180.0 to +180.0)</value>
            <returns>Longitude in degrees</returns>
            <remarks>Positive numbers east of the Greenwich meridian, negative numbers west of the Greenwich meridian.</remarks>
        </member>
        <member name="P:ASCOM.Tools.Transform.SiteElevation">
            <summary>
            Gets or sets the site elevation above sea level
            </summary>
            <value>Site elevation (-300.0 to +10,000.0 metres)</value>
            <returns>Elevation in metres</returns>
            <remarks></remarks>
        </member>
        <member name="P:ASCOM.Tools.Transform.SiteTemperature">
            <summary>
            Gets or sets the site ambient temperature (not reduced to sea level)
            </summary>
            <value>Site ambient temperature (-273.15 to 100.0 Celsius)</value>
            <returns>Temperature in degrees Celsius</returns>
            <remarks>This property represents the air temperature as measured by a thermometer at the observing site. It must not be a "reduced to sea level" value.</remarks>
        </member>
        <member name="P:ASCOM.Tools.Transform.SitePressure">
            <summary>
            Gets or sets the site atmospheric pressure (not reduced to sea level)
            </summary>
            <value>Site atmospheric pressure (0.0 to 1200.0 hPa (mbar))</value>
            <returns>Atmospheric pressure (hPa)</returns>
            <remarks>This property represents the atmospheric pressure as measured by a barometer at the observing site. It must not be a "reduced to sea level" value.</remarks>
        </member>
        <member name="P:ASCOM.Tools.Transform.Refraction">
            <summary>
            Gets or sets a flag indicating whether refraction is calculated for topocentric co-ordinates
            </summary>
            <value>True / false flag indicating refraction is included / omitted from topocentric co-ordinates</value>
            <returns>Boolean flag</returns>
            <remarks></remarks>
        </member>
        <member name="M:ASCOM.Tools.Transform.Refresh">
            <summary>
            Causes the transform component to recalculate values derived from the last Set command
            </summary>
            <remarks>Use this when you have set J2000 co-ordinates and wish to ensure that the mount points to the same 
            co-ordinates allowing for local effects that change with time such as refraction.
            <para><b style="color:red">Note:</b> As of Platform 6 SP2 use of this method is not required, refresh is always performed automatically when required.</para></remarks>
        </member>
        <member name="M:ASCOM.Tools.Transform.SetJ2000(System.Double,System.Double)">
            <summary>
            Sets the known J2000 Right Ascension and Declination coordinates that are to be transformed
            </summary>
            <param name="ra">RA in J2000 co-ordinates (0.0 to 23.999 hours)</param>
            <param name="dec">DEC in J2000 co-ordinates (-90.0 to +90.0)</param>
            <remarks></remarks>
        </member>
        <member name="M:ASCOM.Tools.Transform.SetApparent(System.Double,System.Double)">
            <summary>
            Sets the known apparent Right Ascension and Declination coordinates that are to be transformed
            </summary>
            <param name="ra">RA in apparent co-ordinates (0.0 to 23.999 hours)</param>
            <param name="dec">DEC in apparent co-ordinates (-90.0 to +90.0)</param>
            <remarks></remarks>
        </member>
        <member name="M:ASCOM.Tools.Transform.SetTopocentric(System.Double,System.Double)">
            <summary>
            Sets the known topocentric Right Ascension and Declination coordinates that are to be transformed
            </summary>
            <param name="ra">RA in topocentric co-ordinates (0.0 to 23.999 hours)</param>
            <param name="dec">DEC in topocentric co-ordinates (-90.0 to +90.0)</param>
            <remarks></remarks>
        </member>
        <member name="M:ASCOM.Tools.Transform.SetAzimuthElevation(System.Double,System.Double)">
            <summary>
            Sets the topocentric azimuth and elevation
            </summary>
            <param name="azimuth">Topocentric Azimuth in degrees (0.0 to 359.999999 - north zero, east 90 deg etc.)</param>
            <param name="elevation">Topocentric elevation in degrees (-90.0 to +90.0)</param>
            <remarks></remarks>
        </member>
        <member name="P:ASCOM.Tools.Transform.RAJ2000">
             <summary>
             Returns the Right Ascension in J2000 co-ordinates
             </summary>
             <value>J2000 Right Ascension</value>
             <returns>Right Ascension in hours</returns>
             <exception cref="T:ASCOM.TransformUninitialisedException">Exception thrown if an attempt is made
             to read a value before any of the Set methods has been used or if the value can not be derived from the
             information in the last Set method used. E.g. topocentric values will be unavailable if the last Set was
             a SetApparent and one of the Site properties has not been set.</exception>
             <remarks></remarks>
            
        </member>
        <member name="P:ASCOM.Tools.Transform.DecJ2000">
            <summary>
            Returns the Declination in J2000 co-ordinates
            </summary>
            <value>J2000 Declination</value>
            <returns>Declination in degrees</returns>
            <exception cref="T:ASCOM.TransformUninitialisedException">Exception thrown if an attempt is made
            to read a value before any of the Set methods has been used or if the value can not be derived from the
            information in the last Set method used. E.g. topocentric values will be unavailable if the last Set was
            a SetApparent and one of the Site properties has not been set.</exception>
            <remarks></remarks>
        </member>
        <member name="P:ASCOM.Tools.Transform.RATopocentric">
            <summary>
            Returns the Right Ascension in topocentric co-ordinates
            </summary>
            <value>Topocentric Right Ascension</value>
            <returns>Topocentric Right Ascension in hours</returns>
            <exception cref="T:ASCOM.TransformUninitialisedException">Exception thrown if an attempt is made
            to read a value before any of the Set methods has been used or if the value can not be derived from the
            information in the last Set method used. E.g. topocentric values will be unavailable if the last Set was
            a SetApparent and one of the Site properties has not been set.</exception>
            <remarks></remarks>
        </member>
        <member name="P:ASCOM.Tools.Transform.DECTopocentric">
            <summary>
            Returns the Declination in topocentric co-ordinates
            </summary>
            <value>Topocentric Declination</value>
            <returns>Declination in degrees</returns>
            <exception cref="T:ASCOM.TransformUninitialisedException">Exception thrown if an attempt is made
            to read a value before any of the Set methods has been used or if the value can not be derived from the
            information in the last Set method used. E.g. topocentric values will be unavailable if the last Set was
            a SetApparent and one of the Site properties has not been set.</exception>
            <remarks></remarks>
        </member>
        <member name="P:ASCOM.Tools.Transform.RAApparent">
            <summary>
            Returns the Right Ascension in apparent co-ordinates
            </summary>
            <value>Apparent Right Ascension</value>
            <returns>Right Ascension in hours</returns>
            <exception cref="T:ASCOM.TransformUninitialisedException">Exception thrown if an attempt is made
            to read a value before any of the Set methods has been used or if the value can not be derived from the
            information in the last Set method used. E.g. topocentric values will be unavailable if the last Set was
            a SetApparent and one of the Site properties has not been set.</exception>
            <remarks></remarks>
        </member>
        <member name="P:ASCOM.Tools.Transform.DECApparent">
            <summary>
            Returns the Declination in apparent co-ordinates
            </summary>
            <value>Apparent Declination</value>
            <returns>Declination in degrees</returns>
            <exception cref="T:ASCOM.TransformUninitialisedException">Exception thrown if an attempt is made
            to read a value before any of the Set methods has been used or if the value can not be derived from the
            information in the last Set method used. E.g. topocentric values will be unavailable if the last Set was
            a SetApparent and one of the Site properties has not been set.</exception>
            <remarks></remarks>
        </member>
        <member name="P:ASCOM.Tools.Transform.AzimuthTopocentric">
            <summary>
            Returns the topocentric azimuth angle of the target
            </summary>
            <value>Topocentric azimuth angle</value>
            <returns>Azimuth angle in degrees</returns>
            <exception cref="T:ASCOM.TransformUninitialisedException">Exception thrown if an attempt is made
            to read a value before any of the Set methods has been used or if the value can not be derived from the
            information in the last Set method used. E.g. topocentric values will be unavailable if the last Set was
            a SetApparent and one of the Site properties has not been set.</exception>
            <remarks></remarks>
        </member>
        <member name="P:ASCOM.Tools.Transform.ElevationTopocentric">
            <summary>
            Returns the topocentric elevation of the target
            </summary>
            <value>Topocentric elevation angle</value>
            <returns>Elevation angle in degrees</returns>
            <exception cref="T:ASCOM.TransformUninitialisedException">Exception thrown if an attempt is made
            to read a value before any of the Set methods has been used or if the value can not be derived from the
            information in the last Set method used. E.g. topocentric values will be unavailable if the last Set was
            a SetApparent and one of the Site properties has not been set.</exception>
            <remarks></remarks>
        </member>
        <member name="P:ASCOM.Tools.Transform.JulianDateTT">
            <summary>
            Sets or returns the Julian date on the Terrestrial Time timescale for which the transform will be made
            </summary>
            <value>Julian date (Terrestrial Time) of the transform (1757583.5 to 5373484.499999 = 00:00:00 1/1/0100 to 23:59:59.999 31/12/9999)</value>
            <returns>Terrestrial Time Julian date that will be used by Transform or zero if the PC's current clock value will be used to calculate the Julian date.</returns>
            <remarks>This method was introduced in May 2012. Previously, Transform used the current date-time of the PC when calculating transforms; 
            this remains the default behaviour for backward compatibility.
            The initial value of this parameter is 0.0, which is a special value that forces Transform to replicate original behaviour by determining the  
            Julian date from the PC's current date and time. If this property is non zero, that particular terrestrial time Julian date is used in preference 
            to the value derived from the PC's clock.
            <para>Only one of JulianDateTT or JulianDateUTC needs to be set. Use whichever is more readily available, there is no
            need to set both values. Transform will use the last set value of either JulianDateTT or JulianDateUTC as the basis for its calculations.</para></remarks>
        </member>
        <member name="P:ASCOM.Tools.Transform.JulianDateUTC">
            <summary>
            Sets or returns the Julian date on the UTC timescale for which the transform will be made
            </summary>
            <value>Julian date (UTC) of the transform (1757583.5 to 5373484.499999 = 00:00:00 1/1/0100 to 23:59:59.999 31/12/9999)</value>
            <returns>UTC Julian date that will be used by Transform or zero if the PC's current clock value will be used to calculate the Julian date.</returns>
            <remarks>Introduced in April 2014 as an alternative to JulianDateTT. Only one of JulianDateTT or JulianDateUTC needs to be set. Use whichever is more readily available, there is no
            need to set both values. Transform will use the last set value of either JulianDateTT or JulianDateUTC as the basis for its calculations.</remarks>
        </member>
        <member name="T:ASCOM.Tools.Utilities">
            <summary>
            ASCOM support utilities
            </summary>
        </member>
        <member name="M:ASCOM.Tools.Utilities.DMSToDegrees(System.String)">
            <summary>
            Convert a coordinate expressed in sexagesimal degrees to a double value (degrees)
            </summary>
            <param name="DMSString">The coordinate expressed in sexagesimal notation (Degrees:Minutes:Seconds)</param>
            <exception cref="T:ASCOM.InvalidValueException">If the supplied coordinate contains an invalid character. Valid characters are: "+", "-", "0..9", ":" and "the decimal separator used by the current thread".</exception>
            <returns>The supplied coordinate as a double value (degrees)</returns>
            <remarks>
            <para>
            Only the first three numeric components are considered, the remainder are ignored. Left to right positionally, the components are interpreted as degrees, minutes, and seconds. 
            If only two components are present, they are assumed to be degrees and minutes, and if only one components is present, it is assumed to be degrees. Any components can have a fractional part. 
            </para>
            <para>Examples of valid input values: 127:27:45, 12:26, +345, -45:34:12</para>
            <para>Examples of valid input values in a locale where point is used as the decimal separator: 60:27:45.846, 12:1.349, +345.1840746, -45:34:12.422</para>
            <para>Examples of valid input values in a locale where comma is used as the decimal separator: 60:27:45,846, 12:1,349, +345,1840746, -45:34:12,422</para>
            </remarks>
        </member>
        <member name="M:ASCOM.Tools.Utilities.DMSToHours(System.String)">
            <summary>
            Convert a coordinate expressed in sexagesimal degrees to a double value (hours)
            </summary>
            <param name="DMSString">The coordinate expressed in sexagesimal notation (Degrees:Minutes:Seconds)</param>
            <exception cref="T:ASCOM.InvalidValueException">If the supplied coordinate contains an invalid character. Valid characters are: "+", "-", "0..9", ":" and "the decimal separator used by the current thread".</exception>
            <returns>The supplied coordinate as a double value (hours)</returns>
            <remarks>
            <para>
            Only the first three numeric components are considered, the remainder are ignored. Left to right positionally, the components are interpreted as degrees, minutes, and seconds. 
            If only two components are present, they are assumed to be degrees and minutes, and if only one components is present, it is assumed to be degrees. Any components can have a fractional part. 
            </para>
            <para>Examples of valid input values: 127:27:45, 12:26, +345, -45:34:12</para>
            <para>Examples of valid input values in a locale where point is used as the decimal separator: 60:27:45.846, 12:1.349, +345.1840746, -45:34:12.422</para>
            <para>Examples of valid input values in a locale where comma is used as the decimal separator: 60:27:45,846, 12:1,349, +345,1840746, -45:34:12,422</para>
            </remarks>
        </member>
        <member name="M:ASCOM.Tools.Utilities.HMSToHours(System.String)">
            <summary>
            Convert a coordinate expressed in sexagesimal hours to a double value (hours)
            </summary>
            <param name="HMSString">The coordinate expressed in sexagesimal notation (Hours:Minutes:Seconds)</param>
            <exception cref="T:ASCOM.InvalidValueException">If the supplied coordinate contains an invalid character. Valid characters are: "+", "-", "0..9", ":" and "the decimal separator used by the current thread".</exception>
            <returns>The supplied coordinate as a double value (hours)</returns>
            <remarks>
            <para>
            Only the first three numeric components are considered, the remainder are ignored. Left to right positionally, the components are interpreted as hours, minutes, and seconds. 
            If only two components are present, they are assumed to be hours and minutes, and if only one components is present, it is assumed to be hours. Any components can have a fractional part. 
            </para>
            <para>Examples of valid input values: 11:27:45, 12:26, +3, -5:34:12</para>
            <para>Examples of valid input values in a locale where point is used as the decimal separator: 6:27:45.846, 7:1.349, +8.1840746, -5:34:12.422</para>
            <para>Examples of valid input values in a locale where comma is used as the decimal separator: 6:27:45,846, 7:1,349, +8,1840746, -5:34:12,422</para>
            </remarks>
        </member>
        <member name="M:ASCOM.Tools.Utilities.HMSToDegrees(System.String)">
            <summary>
            Convert a coordinate expressed in sexagesimal hours to a double value (degrees)
            </summary>
            <param name="HMS">The coordinate expressed in sexagesimal notation (Hours:Minutes:Seconds)</param>
            <exception cref="T:ASCOM.InvalidValueException">If the supplied coordinate contains an invalid character. Valid characters are: "+", "-", "0..9", ":" and "the decimal separator used by the current thread".</exception>
            <returns>The supplied coordinate as a double value (hours)</returns>
            <remarks>
            <para>
            Only the first three numeric components are considered, the remainder are ignored. Left to right positionally, the components are interpreted as hours, minutes, and seconds. 
            If only two components are present, they are assumed to be hours and minutes, and if only one components is present, it is assumed to be hours. Any components can have a fractional part. 
            </para>
            <para>Examples of valid input values: 11:27:45, 12:26, +3, -5:34:12</para>
            <para>Examples of valid input values in a locale where point is used as the decimal separator: 6:27:45.846, 7:1.349, +8.1840746, -5:34:12.422</para>
            <para>Examples of valid input values in a locale where comma is used as the decimal separator: 6:27:45,846, 7:1,349, +8,1840746, -5:34:12,422</para>
            </remarks>
        </member>
        <member name="M:ASCOM.Tools.Utilities.DegreesToDMS(System.Double)">
            <summary>
            Convert degrees to sexagesimal degrees, minutes and seconds with default delimiters DD° MM' SS" 
            </summary>
            <param name="Degrees">The degrees value to convert</param>
            <returns>Sexagesimal representation of degrees input value, degrees, minutes, and seconds</returns>
            <remarks>
            <para>If you need a leading plus sign, you must prepend it yourself. The delimiters are not restricted to single 
            characters.</para>
            <para>This overload is not available through COM, please use 
            "DegreesToDMS(ByVal Degrees As Double, ByVal DegDelim As String, ByVal MinDelim As String, ByVal SecDelim As String)"
            with suitable parameters to achieve this effect.</para>
            </remarks>
        </member>
        <member name="M:ASCOM.Tools.Utilities.DegreesToDMS(System.Double,System.String,System.String,System.String,System.Int32)">
            <summary>
             Convert degrees to sexagesimal degrees, minutes and seconds with specified second decimal places
            </summary>
            <param name="Degrees">The degrees value to convert</param>
            <param name="DegDelim">The delimiter string separating degrees and minutes </param>
            <param name="MinDelim">The delimiter string to append to the minutes part </param>
            <param name="SecDelim">The delimiter string to append to the seconds part</param>
            <param name="SecDecimalDigits">The number of digits after the decimal point on the seconds part </param>
            <returns>Sexagesimal representation of degrees input value, degrees, minutes, and seconds</returns>
            <remarks>
            <para>If you need a leading plus sign, you must prepend it yourself. The delimiters are not restricted to single 
            characters.</para>
            </remarks>
        </member>
        <member name="M:ASCOM.Tools.Utilities.DegreesToDM(System.Double)">
            <summary>
            Convert degrees to sexagesimal degrees and minutes with default delimiters DD° MM'
            </summary>
            <param name="Degrees">The degrees value to convert</param>
            <returns>Sexagesimal representation of degrees input value, as degrees and minutes</returns>
            <remarks>
            <para>If you need a leading plus sign, you must prepend it yourself. The delimiters are not restricted to single characters.</para>
            <para>This overload is not available through COM, please use 
            "DegreesToDM(ByVal Degrees As Double, ByVal DegDelim As String, ByVal MinDelim As String, ByVal MinDecimalDigits As Integer)"
            with suitable parameters to achieve this effect.</para>
            </remarks>
        </member>
        <member name="M:ASCOM.Tools.Utilities.DegreesToDM(System.Double,System.String,System.String,System.Int32)">
            <summary>
            Convert degrees to sexagesimal degrees and minutes with the specified number of minute decimal places
            </summary>
            <param name="Degrees">The degrees value to convert</param>
            <param name="DegDelim">The delimiter string separating degrees </param>
            <param name="MinDelim">The delimiter string to append to the minutes </param>
            <param name="MinDecimalDigits">The number of digits after the decimal point on the minutes part </param>
            <returns>Sexagesimal representation of degrees input value, as degrees and minutes</returns>
            <remarks>
            <para>If you need a leading plus sign, you must prepend it yourself. The delimiters are not restricted to single characters.</para>
            </remarks>
        </member>
        <member name="M:ASCOM.Tools.Utilities.DegreesToHMS(System.Double)">
            <summary>
            Convert degrees to sexagesimal hours, minutes, and seconds with default delimiters of HH:MM:SS
            </summary>
            <param name="Degrees">The degrees value to convert</param>
            <returns>Sexagesimal representation of degrees input value, as hours, minutes, and seconds</returns>
            <remarks>
            <para>If you need a leading plus sign, you must prepend it yourself.</para>
            <para>This overload is not available through COM, please use 
            "DegreesToHMS(ByVal Degrees As Double, ByVal HrsDelim As String, ByVal MinDelim As String, ByVal SecDelim As String, ByVal SecDecimalDigits As Integer)"
            with suitable parameters to achieve this effect.</para>
            </remarks>
        </member>
        <member name="M:ASCOM.Tools.Utilities.DegreesToHMS(System.Double,System.String,System.String,System.String,System.Int32)">
            <summary>
            Convert degrees to sexagesimal hours, minutes, and seconds with the specified number of second decimal places
            </summary>
            <param name="Degrees">The degrees value to convert</param>
            <param name="HrsDelim">The delimiter string separating hours and minutes</param>
            <param name="MinDelim">The delimiter string separating minutes and seconds</param>
            <param name="SecDelim">The delimiter string to append to the seconds part </param>
            <param name="SecDecimalDigits">The number of digits after the decimal point on the seconds part </param>
            <returns>Sexagesimal representation of degrees input value, as hours, minutes, and seconds</returns>
            <remarks>
            <para>If you need a leading plus sign, you must prepend it yourself. The delimiters are not restricted to single characters. </para>
            </remarks>
        </member>
        <member name="M:ASCOM.Tools.Utilities.DegreesToHM(System.Double)">
            <summary>
            Convert degrees to sexagesimal hours and minutes with default delimiters HH:MM
            </summary>
            <param name="Degrees">The degrees value to convert</param>
            <returns>Sexagesimal representation of degrees input value as hours and minutes</returns>
            <remarks>
            <para>If you need a leading plus sign, you must prepend it yourself. The delimiters are not restricted to single characters</para>
            <para>This overload is not available through COM, please use 
            "DegreesToHM(ByVal Degrees As Double, ByVal HrsDelim As String, ByVal MinDelim As String, ByVal MinDecimalDigits As Integer)"
            with suitable parameters to achieve this effect.</para>
            </remarks>
        </member>
        <member name="M:ASCOM.Tools.Utilities.DegreesToHM(System.Double,System.String,System.String,System.Int32)">
            <summary>
            Convert degrees to sexagesimal hours and minutes with supplied number of minute decimal places
            </summary>
            <param name="Degrees">The degrees value to convert</param>
            <param name="HrsDelim">The delimiter string separating hours and minutes</param>
            <param name="MinDelim">The delimiter string to append to the minutes part</param>
            <param name="MinDecimalDigits">Number of minutes decimal places</param>
            <returns>Sexagesimal representation of degrees input value as hours and minutes</returns>
            <remarks>
            <para>If you need a leading plus sign, you must prepend it yourself. The delimiters are not restricted to single characters</para>
            </remarks>
        </member>
        <member name="M:ASCOM.Tools.Utilities.HoursToHMS(System.Double)">
            <summary>
            Convert hours to sexagesimal hours, minutes, and seconds with default delimiters HH:MM:SS
            </summary>
            <param name="Hours">The hours value to convert</param>
            <returns>Sexagesimal representation of hours input value, hours, minutes and seconds</returns>
            <remarks>
            <para>If you need a leading plus sign, you must prepend it yourself. The delimiters are not restricted to single characters.</para>
            <para>This overload is not available through COM, please use 
            "HoursToHMS(ByVal Hours As Double, ByVal HrsDelim As String, ByVal MinDelim As String, ByVal SecDelim As String, ByVal SecDecimalDigits As Integer)"
            with suitable parameters to achieve this effect.</para>
            </remarks>
        </member>
        <member name="M:ASCOM.Tools.Utilities.HoursToHMS(System.Double,System.String,System.String,System.String,System.Int32)">
            <summary>
            Convert hours to sexagesimal hours, minutes, and seconds with specified number of second decimal places
            </summary>
            <param name="Hours">The hours value to convert</param>
            <param name="HrsDelim">The delimiter string separating hours and minutes </param>
            <param name="MinDelim">The delimiter string separating minutes and seconds </param>
            <param name="SecDelim">The delimiter string to append to the seconds part </param>
            <param name="SecDecimalDigits">The number of digits after the decimal point on the seconds part </param>
            <returns>Sexagesimal representation of hours input value, hours, minutes and seconds</returns>
            <remarks>
            <para>If you need a leading plus sign, you must prepend it yourself. The delimiters are not restricted to single characters.</para>
            </remarks>
        </member>
        <member name="M:ASCOM.Tools.Utilities.HoursToHM(System.Double)">
            <summary>
            Convert hours to sexagesimal hours and minutes with default delimiters HH:MM
            </summary>
            <param name="Hours">The hours value to convert</param>
            <returns>Sexagesimal representation of hours input value as hours and minutes</returns>
            <remarks>
            <para>If you need a leading plus sign, you must prepend it yourself. The delimiters are not restricted to single characters.</para>
            <para>This overload is not available through COM, please use 
            "HoursToHM(ByVal Hours As Double, ByVal HrsDelim As String, ByVal MinDelim As String, ByVal MinDecimalDigits As Integer)"
            with an suitable parameters to achieve this effect.</para>
            </remarks>
        </member>
        <member name="M:ASCOM.Tools.Utilities.HoursToHM(System.Double,System.String,System.String,System.Int32)">
            <summary>
            Convert hours to sexagesimal hours and minutes with supplied number of minute decimal places
            </summary>
            <param name="Hours">The hours value to convert</param>
            <param name="HrsDelim">The delimiter string separating hours </param>
            <param name="MinDelim">The delimiter string to append to the minutes part </param>
            <param name="MinDecimalDigits">The number of digits after the decimal point on the minutes part </param>
            <returns>Sexagesimal representation of hours input value as hours and minutes</returns>
            <remarks>
            <para>If you need a leading plus sign, you must prepend it yourself. The delimiters are not restricted to single characters.</para>
            </remarks>
        </member>
        <member name="M:ASCOM.Tools.Utilities.JulianDateToDateTime(System.Double)">
            <summary>
            Convert a Julian date to a UTC DateTime value on the Gregorian time scale
            </summary>
            <param name="JD">Julian date</param>
            <returns>UTC DateTime value corresponding to the supplied Julian date</returns>
            <exception cref="T:ASCOM.InvalidValueException">If the Julian date corresponds to a date before 15th October 1582 when the Gregorian calendar was introduced.</exception>
            <remarks>
            <para>Julian dates are always in UTC.</para>
            <para>The algorithm is from the Explanatory Supplement to the Astronomical Almanac 3rd Edition 2013 edited by Urban and Seidelmann pages 617-619 and has been validated against
            the USNO Julian date calculator at https://aa.usno.navy.mil/data/docs/JulianDate.php </para>
            </remarks>
        </member>
        <member name="M:ASCOM.Tools.Utilities.JulianDateFromDateTime(System.DateTime)">
            <summary>
            Calculate the Julian date from a provided DateTime value
            </summary>
            <param name="ObservationDateTime">DateTime in UTC</param>
            <returns>Julian date</returns>
            <remarks>Julian dates should always be in UTC </remarks>
        </member>
        <member name="P:ASCOM.Tools.Utilities.JulianDateUtc">
            <summary>
            Current Julian date based on the UTC time scale
            </summary>
            <returns>Current Julian date on the UTC time scale</returns>
            <remarks></remarks>
        </member>
        <member name="M:ASCOM.Tools.Utilities.ConvertUnits(System.Double,ASCOM.Tools.Unit,ASCOM.Tools.Unit)">
            <summary>
            Convert from one set of speed / temperature / pressure rain rate units to another
            </summary>
            <param name="InputValue">Value to convert</param>
            <param name="FromUnits">Integer value from the Units enum indicating the value's current units</param>
            <param name="ToUnits">Integer value from the Units enum indicating the units to which the input value should be converted</param>
            <returns>Input value expressed in the new units</returns>
            <exception cref="T:ASCOM.InvalidOperationException">When the specified from and to units can not refer to the same value. e.g. attempting to convert miles per hour to degrees Celsius</exception>
            <remarks>
            <para>Conversions available:</para>
            <list type="bullet">
            <item>metres per second &lt;==&gt; miles per hour &lt;==&gt; knots</item>
            <item>Celsius &lt;==&gt; Fahrenheit &lt;==&gt; Kelvin</item>
            <item>hecto Pascals (hPa) &lt;==&gt; milli bar(mbar) &lt;==&gt; mm of mercury &lt;==&gt; inches of mercury</item>
            <item>mm per hour &lt;==&gt; inches per hour</item>
            </list>
            <para>Knots conversions use the international nautical mile definition (1 nautical mile = 1852m) rather than the original UK or US Admiralty definitions.</para>
            <para>For convenience, milli bar and hecto Pascals are shown as separate units even though they have numerically identical values and there is a 1:1 conversion between them.</para>
            </remarks>
        </member>
        <member name="M:ASCOM.Tools.Utilities.Humidity2DewPoint(System.Double,System.Double)">
            <summary>
            Calculate the dew point (°Celsius) given the ambient temperature (°Celsius) and relative humidity (%)
            </summary>
            <param name="RelativeHumidity">Relative humidity expressed in percent (0.0 .. 100.0)</param>
            <param name="AmbientTemperature">Ambient temperature (°Celsius)</param>
            <returns>Dew point (°Celsius)</returns>
            <exception cref="T:ASCOM.InvalidOperationException">When relative humidity &lt; 0.0% or &gt; 100.0%></exception>
            <exception cref="T:ASCOM.InvalidOperationException">When ambient temperature &lt; absolute zero or &gt; 100.0C></exception>
             <remarks>'Calculation uses Vaisala formula for water vapour saturation pressure and is accurate to 0.083% over -20C - +50°C
            <para>http://www.vaisala.com/Vaisala%20Documents/Application%20notes/Humidity_Conversion_Formulas_B210973EN-F.pdf </para>
            </remarks>
        </member>
        <member name="M:ASCOM.Tools.Utilities.DewPoint2Humidity(System.Double,System.Double)">
            <summary>
            Calculate the relative humidity (%) given the ambient temperature (°Celsius) and dew point (°Celsius)
            </summary>
            <param name="DewPoint">Dewpoint in (°Celsius)</param>
            <param name="AmbientTemperature">Ambient temperature (°Celsius)</param>
            <returns>Humidity expressed in percent (0.0 .. 100.0)</returns>
            <exception cref="T:ASCOM.InvalidOperationException">When dew point &lt; absolute zero or &gt; 100.0C></exception>
            <exception cref="T:ASCOM.InvalidOperationException">When ambient temperature &lt; absolute zero or &gt; 100.0C></exception>
            <remarks>'Calculation uses the Vaisala formula for water vapour saturation pressure and is accurate to 0.083% over -20C - +50°C
            <para>http://www.vaisala.com/Vaisala%20Documents/Application%20notes/Humidity_Conversion_Formulas_B210973EN-F.pdf </para>
            </remarks>
        </member>
        <member name="M:ASCOM.Tools.Utilities.ConvertPressure(System.Double,System.Double,System.Double)">
            <summary>
            Convert atmospheric pressure from one altitude above mean sea level to another
            </summary>
            <param name="Pressure">Measured pressure in hPa (mBar) at the "From" altitude</param>
            <param name="FromAltitudeAboveMeanSeaLevel">"Altitude at which the input pressure was measured (metres)</param>
            <param name="ToAltitudeAboveMeanSeaLevel">Altitude to which the pressure is to be converted (metres)</param>
            <returns>Pressure in hPa at the "To" altitude</returns>
            <remarks>Uses the equation: p = p0 * (1.0 - 2.25577E-05 h)^5.25588</remarks>
        </member>
        <member name="M:ASCOM.Tools.Utilities.Range(System.Double,System.Double,System.Boolean,System.Double,System.Boolean)">
            <summary>
            Flexible routine to range a number into a given range between a lower and an higher bound.
            </summary>
            <param name="Value">Value to be ranged</param>
            <param name="LowerBound">Lowest value of the range</param>
            <param name="LowerEqual">Boolean flag indicating whether the ranged value can have the lower bound value</param>
            <param name="UpperBound">Highest value of the range</param>
            <param name="UpperEqual">Boolean flag indicating whether the ranged value can have the upper bound value</param>
            <returns>The ranged number as a double</returns>
            <exception cref="T:ASCOM.InvalidOperationException">Thrown if the lower bound is greater than the upper bound.</exception>
            <exception cref="T:ASCOM.InvalidOperationException">Thrown if LowerEqual and UpperEqual are both false and the ranged value equals
            one of these values. This is impossible to handle as the algorithm will always violate one of the rules!</exception>
            <remarks>
            UpperEqual and LowerEqual switches control whether the ranged value can be equal to either the upper and lower bounds. So, 
            to range an hour angle into the range 0 to 23.999999.. hours, use this call: 
            <code>RangedValue = Range(InputValue, 0.0, True, 24.0, False)</code>
            <para>The input value will be returned in the range where 0.0 is an allowable value and 24.0 is not i.e. in the range 0..23.999999..</para>
            <para>It is not permissible for both LowerEqual and UpperEqual to be false because it will not be possible to return a value that is exactly equal 
            to either lower or upper bounds. An exception is thrown if this scenario is requested.</para>
            </remarks>
        </member>
        <member name="M:ASCOM.Tools.Utilities.ConditionHA(System.Double)">
            <summary>
            Conditions an hour angle to be in the range -12.0 to +12.0 by adding or subtracting 24.0 hours
            </summary>
            <param name="HA">Hour angle to condition</param>
            <returns>Hour angle in the range -12.0 to +12.0</returns>
            <remarks></remarks>
        </member>
        <member name="M:ASCOM.Tools.Utilities.ConditionRA(System.Double)">
            <summary>
            Conditions a Right Ascension value to be in the range 0 to 23.999999.. hours 
            </summary>
            <param name="RA">Right ascension to be conditioned</param>
            <returns>Right ascension in the range 0 to 23.999999...</returns>
            <remarks></remarks>
        </member>
        <member name="M:ASCOM.Tools.Utilities.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:ASCOM.Tools.Utilities.Dispose">
            <summary>
            Dispose of the Utilities object
            </summary>
            <remarks>This method is present to implement the IDisposable pattern, which enables the Utilities component to be referenced within a Using statement.</remarks>
        </member>
        <member name="T:ASCOM.Tools.XMLProfile">
            <summary>
            Creates and manages an ASCOM Profile as an XML file
            </summary>
        </member>
        <member name="P:ASCOM.Tools.XMLProfile.AlpacaDataPath">
            <summary>
            Return the Alpaca folder referenced from the ApplicationDataPath
            </summary>
        </member>
        <member name="P:ASCOM.Tools.XMLProfile.ApplicationDataPath">
            <summary>
            Return ASCOM's application data folder on this Base machine
            </summary>
        </member>
        <member name="M:ASCOM.Tools.XMLProfile.#ctor(System.String,System.String,System.UInt32,ASCOM.Common.Interfaces.ILogger)">
            <summary>
            Creates an XML profile, loading what exists at the path. This is Home or Documents /ASCOM/Alpaca/{driverID}/{deviceType}/v1/Instance-{deviceID}.xml or /ascom/alpaca/{driverID}/{deviceType}/v1/instance-{deviceID}.xml
            It is not recommended to access the same file from two different instances of this Profile at the same time 
            </summary>
            <param name="driverID">A unique name for your driver. Must be allowed to be in the path.</param>
            <param name="deviceType">The ASCOM / Alpaca device type IE focuser, camera, telescope, etc.  Must be allowed to be in the path.</param>
            <param name="deviceNumber">The Alpaca device number. Defaults to 0 for drivers with only one device.</param>
            <param name="logger">The logging device to be used (can be null).</param>
        </member>
        <member name="M:ASCOM.Tools.XMLProfile.#ctor(System.String,ASCOM.Common.Interfaces.ILogger)">
            <summary>
            Creates an XML profile, loading what exists at the specified path. It will save any changes at the path
            It is not recommended to access the same file from two different instances of this Profile at the same time
            </summary>
            <param name="pathAndFileName">The path and filename to store the profile at</param>
            <param name="logger">The logging device to be used (can be null).</param>
        </member>
        <member name="M:ASCOM.Tools.XMLProfile.Clear">
            <summary>
            Clears all setting and deletes the XML Profile file
            </summary>
        </member>
        <member name="M:ASCOM.Tools.XMLProfile.ContainsKey(System.String)">
            <summary>
            Determines whether a settings key already exists
            </summary>
            <param name="key">Name of the key</param>
            <returns>True if the settings key already exists, otherwise false</returns>
        </member>
        <member name="M:ASCOM.Tools.XMLProfile.GetValue(System.String)">
            <summary>
            Gets a key's current value, returning a KeyNotFound exception if the key doesn't exist
            </summary>
            <param name="key">Key name</param>
            <returns>String key value.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">If the specified key does not exist</exception>
        </member>
        <member name="M:ASCOM.Tools.XMLProfile.GetValue(System.String,System.String)">
            <summary>
            Gets a key's current value, setting and returning the supplied default value if the key does not already exist
            </summary>
            <param name="key">Key name</param>
            <param name="defaultValue">Value to be set and returned if the key does not already exist.</param>
            <returns>String key value.</returns>
        </member>
        <member name="M:ASCOM.Tools.XMLProfile.GetProfile">
            <summary>
            Returns the whole Profile as an XML document
            </summary>
            <returns>string XML document</returns>
            <exception cref="T:System.NullReferenceException">No settings have been loaded.</exception>
        </member>
        <member name="M:ASCOM.Tools.XMLProfile.DeleteValue(System.String)">
            <summary>
            Deletes a key from the Profile
            </summary>
            <param name="key">Key name to delete</param>
        </member>
        <member name="M:ASCOM.Tools.XMLProfile.SetProfile(System.String)">
            <summary>
            Sets a profile from an XML document
            </summary>
            <param name="rawProfile">A raw XML profile string returned by <see cref="M:ASCOM.Tools.XMLProfile.GetProfile"/></param>
            <exception cref="T:System.ArgumentNullException">If the supplied profile string is null or empty</exception>
        </member>
        <member name="M:ASCOM.Tools.XMLProfile.Values">
            <summary>
            Returns a list of Profile values
            </summary>
            <returns>String list of values</returns>
        </member>
        <member name="M:ASCOM.Tools.XMLProfile.Keys">
            <summary>
            Returns a list of Profile keys
            </summary>
            <returns>String list of keys</returns>
        </member>
        <member name="M:ASCOM.Tools.XMLProfile.WriteValue(System.String,System.String)">
            <summary>
            Write a key and value to the XML Profile.
            </summary>
            <param name="key">Key name.</param>
            <param name="value">Key value.</param>
        </member>
        <member name="M:ASCOM.Tools.XMLProfile.DeSerializeObjectFromFile``1(System.String)">
            <summary>
            De-serializes a file and returns an object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:ASCOM.Tools.XMLProfile.SerializeObject``1(``0,System.String)">
            <summary>
            Serializes a file and returns an object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializableObject"></param>
            <param name="filePathAndName"></param>
        </member>
        <member name="M:ASCOM.Tools.XMLProfile.Save">
            <summary>
            persist the current Profile to the backing file store
            </summary>
        </member>
        <member name="T:ASCOM.Tools.XMLProfile.SettingsPair">
            <summary>
            Class representing an ASCOM Profile Key-Value pair.
            </summary>
        </member>
        <member name="M:ASCOM.Tools.XMLProfile.SettingsPair.#ctor">
            <summary>
            Initialise the SettingsPair as an empty object.
            </summary>
        </member>
        <member name="M:ASCOM.Tools.XMLProfile.SettingsPair.#ctor(System.String,System.String)">
            <summary>
            Initialise the SettingsPair with the supplied key name and value.
            </summary>
            <param name="key">The key name for this setting</param>
            <param name="value">The value of this setting</param>
        </member>
        <member name="P:ASCOM.Tools.XMLProfile.SettingsPair.Key">
            <summary>
            This setting's Key name.
            </summary>
        </member>
        <member name="P:ASCOM.Tools.XMLProfile.SettingsPair.Value">
            <summary>
            This setting's value.
            </summary>
        </member>
        <member name="T:ASCOM.TransformUninitialisedException">
            <summary>
            Exception thrown by the Transform component when an uninitialised property is read.
            </summary>
        </member>
        <member name="M:ASCOM.TransformUninitialisedException.#ctor(System.String)">
            <summary>
            Create a new exception with message 
            </summary>
            <param name="message">Message to be reported by the exception</param>
            <remarks></remarks>
        </member>
        <member name="M:ASCOM.TransformUninitialisedException.#ctor(System.String,System.Exception)">
            <summary>
            Create a new exception with message 
            </summary>
            <param name="message">Message to be reported by the exception</param>
            <param name="inner">Exception to be reported as the inner exception</param>
            <remarks></remarks>
        </member>
        <member name="M:ASCOM.TransformUninitialisedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialise the exception
            </summary>
            <param name="info">Serialisation information</param>
            <param name="context">Serialisation context</param>
            <remarks></remarks>
        </member>
    </members>
</doc>
